#!/usr/bin/env python
# coding: utf-8

# In[1]:


# IMPORTANTE:
# USUARIO PARA LA INTERFAZ : Emtech2021
# CONTRASEÑA : BecasEmtech2021

#This is the LifeStore_SalesList data:

#lifestore_searches = [id_search, id product]
#lifestore_sales = [id_sale, id_product, score (from 1 to 5), date, refund (1 for true or 0 to false)]
#lifestore_products = [id_product, name, price, category, stock]


lifestore_products = [
    [1, 'Procesador AMD Ryzen 3 3300X S-AM4, 3.80GHz, Quad-Core, 16MB L2 Cache', 3019, 'procesadores', 16],
    [2, 'Procesador AMD Ryzen 5 3600, S-AM4, 3.60GHz, 32MB L3 Cache, con Disipador Wraith Stealth', 4209, 'procesadores', 182],
    [3, 'Procesador AMD Ryzen 5 2600, S-AM4, 3.40GHz, Six-Core, 16MB L3 Cache, con Disipador Wraith Stealth', 3089, 'procesadores', 987],
    [4, 'Procesador AMD Ryzen 3 3200G con Gráficos Radeon Vega 8, S-AM4, 3.60GHz, Quad-Core, 4MB L3, con Disipador Wraith Spire', 2209, 'procesadores', 295],
    [5, 'Procesador Intel Core i3-9100F, S-1151, 3.60GHz, Quad-Core, 6MB Cache (9na. Generación - Coffee Lake)', 1779, 'procesadores', 130],
    [6, 'Procesador Intel Core i9-9900K, S-1151, 3.60GHz, 8-Core, 16MB Smart Cache (9na. Generación Coffee Lake)', 11809, 'procesadores', 54],
    [7, 'Procesador Intel Core i7-9700K, S-1151, 3.60GHz, 8-Core, 12MB Smart Cache (9na. Generación Coffee Lake)', 8559, 'procesadores', 114],
    [8, 'Procesador Intel Core i5-9600K, S-1151, 3.70GHz, Six-Core, 9MB Smart Cache (9na. Generiación - Coffee Lake)', 5399, 'procesadores', 8],
    [9, 'Procesador Intel Core i3-8100, S-1151, 3.60GHz, Quad-Core, 6MB Smart Cache (8va. Generación - Coffee Lake)', 2549, 'procesadores', 35],
    [10, 'MSI GeForce 210, 1GB GDDR3, DVI, VGA, HDCP, PCI Express 2.0', 889, 'tarjetas de video', 13],
    [11, 'Tarjeta de Video ASUS AMD Radeon RX 570, 4GB 256-bit GDDR5, PCI Express 3.0', 7399, 'tarjetas de video', 2],
    [12, 'Tarjeta de Video ASUS NVIDIA GeForce GTX 1660 SUPER EVO OC, 6GB 192-bit GDDR6, PCI Express x16 3.0', 6619, 'tarjetas de video', 0],
    [13, 'Tarjeta de Video Asus NVIDIA GeForce GTX 1050 Ti Phoenix, 4GB 128-bit GDDR5, PCI Express 3.0', 3989, 'tarjetas de video', 1],
    [14, 'Tarjeta de Video EVGA NVIDIA GeForce GT 710, 2GB 64-bit GDDR3, PCI Express 2.0', 1439, 'tarjetas de video', 36],
    [15, 'Tarjeta de Video EVGA NVIDIA GeForce GTX 1660 Ti SC Ultra Gaming, 6GB 192-bit GDDR6, PCI 3.0', 8439, 'tarjetas de video', 15],
    [16, 'Tarjeta de Video EVGA NVIDIA GeForce RTX 2060 SC ULTRA Gaming, 6GB 192-bit GDDR6, PCI Express 3.0', 9799, 'tarjetas de video', 10],
    [17, 'Tarjeta de Video Gigabyte AMD Radeon R7 370 OC, 2GB 256-bit GDDR5, PCI Express 3.0', 4199, 'tarjetas de video', 1],
    [18, 'Tarjeta de Video Gigabyte NVIDIA GeForce GT 1030, 2GB 64-bit GDDR5, PCI Express x16 3.0', 2199, 'tarjetas de video', 5],
    [19, 'Tarjeta de Video Gigabyte NVIDIA GeForce GTX 1650 OC Low Profile, 4GB 128-bit GDDR5, PCI Express 3.0 x16', 4509, 'tarjetas de video', 8],
    [20, 'Tarjeta de Video Gigabyte NVIDIA GeForce RTX 2060 SUPER WINDFORCE OC, 8 GB 256 bit GDDR6, PCI Express x16 3.0', 11509, 'tarjetas de video', 10],
    [21, 'Tarjeta de Video MSI AMD Mech Radeon RX 5500 XT MECH Gaming OC, 8GB 128-bit GDDR6, PCI Express 4.0', 5159, 'tarjetas de video', 0],
    [22, 'Tarjeta de Video MSI NVIDIA GeForce GTX 1050 Ti OC, 4GB 128-bit GDDR5, PCI Express x16 3.0', 3429, 'tarjetas de video', 0],
    [23, 'Tarjeta de Video MSI Radeon X1550, 128MB 64 bit GDDR2, PCI Express x16', 909, 'tarjetas de video', 10],
    [24, 'Tarjeta de Video PNY NVIDIA GeForce RTX 2080, 8GB 256-bit GDDR6, PCI Express 3.0\xa0', 30449, 'tarjetas de video', 2],
    [25, 'Tarjeta de Video Sapphire AMD Pulse Radeon RX 5500 XT Gaming, 8GB 128-bit GDDR6, PCI Express 4.0', 5529, 'tarjetas de video', 10],
    [26, 'Tarjeta de Video VisionTek AMD Radeon HD 5450, 1GB DDR3, PCI Express x16 2.1', 1249, 'tarjetas de video', 180],
    [27, 'Tarjeta de Video VisionTek AMD Radeon HD5450, 2GB GDDR3, PCI Express x16', 2109, 'tarjetas de video', 43],
    [28, 'Tarjeta de Video Zotac NVIDIA GeForce GTX 1660 Ti, 6GB 192-bit GDDR6, PCI Express x16 3.0', 9579, 'tarjetas de video', 3],
    [29, 'Tarjeta Madre ASUS micro ATX TUF B450M-PLUS GAMING, S-AM4, AMD B450, HDMI, 64GB DDR4 para AMD', 2499, 'tarjetas madre', 10],
    [30, 'Tarjeta Madre AORUS ATX Z390 ELITE, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel', 4029, 'tarjetas madre', 50],
    [31, 'Tarjeta Madre AORUS micro ATX B450 AORUS M (rev. 1.0), S-AM4, AMD B450, HDMI, 64GB DDR4 para AMD', 2229, 'tarjetas madre', 120],
    [32, 'Tarjeta Madre ASRock Z390 Phantom Gaming 4, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel\xa0', 4309, 'tarjetas madre', 10],
    [33, 'Tarjeta Madre ASUS ATX PRIME Z390-A, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel\xa0', 4269, 'tarjetas madre', 43],
    [34, 'Tarjeta Madre ASUS ATX ROG STRIX B550-F GAMING WI-FI, S-AM4, AMD B550, HDMI, max. 128GB DDR4 para AMD', 5289, 'tarjetas madre', 2],
    [35, 'Tarjeta Madre Gigabyte micro ATX Z390 M GAMING, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel\xa0', 3419, 'tarjetas madre', 30],
    [36, 'Tarjeta Madre Gigabyte micro ATX Z490M GAMING X (rev. 1.0), Intel Z490, HDMI, 128GB DDR4 para Intel', 4159, 'tarjetas madre', 10],
    [37, 'Tarjeta Madre ASRock ATX Z490 STEEL LEGEND, S-1200, Intel Z490, HDMI, 128GB DDR4 para Intel', 4289, 'tarjetas madre', 60],
    [38, 'Tarjeta Madre Gigabyte Micro ATX H310M DS2 2.0, S-1151, Intel H310, 32GB DDR4 para Intel\xa0', 1369, 'tarjetas madre', 15],
    [39, 'ASUS T. Madre uATX M4A88T-M, S-AM3, DDR3 para Phenom II/Athlon II/Sempron 100', 2169, 'tarjetas madre', 98],
    [40, 'Tarjeta Madre Gigabyte XL-ATX TRX40 Designare, S-sTRX4, AMD TRX40, 256GB DDR4 para AMD', 17439, 'tarjetas madre', 1],
    [41, 'Tarjeta Madre ASUS micro ATX Prime H370M-Plus/CSM, S-1151, Intel H370, HDMI, 64GB DDR4 para Intel', 3329, 'tarjetas madre', 286],
    [42, 'Tarjeta Madre ASRock Micro ATX B450M Steel Legend, S-AM4, AMD B450, HDMI, 64GB DDR4 para AMD', 1779, 'tarjetas madre', 0],
    [43, 'Tarjeta Madre ASUS ATX ROG STRIX Z390-E GAMING, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel', 6369, 'tarjetas madre', 5],
    [44, 'Tarjeta Madre MSI ATX B450 TOMAHAWK MAX, S-AM4, AMD B450, 64GB DDR4 para AMD', 2759, 'tarjetas madre', 0],
    [45, 'Tarjeta Madre ASRock ATX H110 Pro BTC+, S-1151, Intel H110, 32GB DDR4, para Intel', 2869, 'tarjetas madre', 25],
    [46, 'Tarjeta Madre Gigabyte micro ATX GA-H110M-DS2, S-1151, Intel H110, 32GB DDR4 para Intel', 1539, 'tarjetas madre', 49],
    [47, 'SSD XPG SX8200 Pro, 256GB, PCI Express, M.2', 1209, 'discos duros', 8],
    [48, 'SSD Kingston A2000 NVMe, 1TB, PCI Express 3.0, M2', 2559, 'discos duros', 50],
    [49, 'Kit SSD Kingston KC600, 1TB, SATA III, 2.5, 7mm', 3139, 'discos duros', 3],
    [50, 'SSD Crucial MX500, 1TB, SATA III, M.2', 2949, 'discos duros', 4],
    [51, 'SSD Kingston UV500, 480GB, SATA III, mSATA', 2399, 'discos duros', 0],
    [52, 'SSD Western Digital WD Blue 3D NAND, 2TB, M.2', 5659, 'discos duros', 13],
    [53, 'SSD Addlink Technology S70, 512GB, PCI Express 3.0, M.2', 2039, 'discos duros', 1],
    [54, "SSD Kingston A400, 120GB, SATA III, 2.5'', 7mm", 259, 'discos duros', 300],
    [55, 'SSD para Servidor Supermicro SSD-DM128-SMCMVN1, 128GB, SATA III, mSATA, 6Gbit/s', 4399, 'discos duros', 10],
    [56, "SSD para Servidor Lenovo Thinksystem S4500, 480GB, SATA III, 3.5'', 7mm", 3269, 'discos duros', 3],
    [57, "SSD Adata Ultimate SU800, 256GB, SATA III, 2.5'', 7mm", 889, 'discos duros', 15],
    [58, "SSD para Servidor Lenovo Thinksystem S4510, 480GB, SATA III, 2.5'', 7mm", 3679, 'discos duros', 16],
    [59, 'SSD Samsung 860 EVO, 1TB, SATA III, M.2', 5539, 'discos duros', 10],
    [60, 'Kit Memoria RAM Corsair Dominator Platinum DDR4, 3200MHz, 16GB (2x 8GB), Non-ECC, CL16, XMP', 2519, 'memorias usb', 10],
    [61, 'Kit Memoria RAM Corsair Vengeance LPX DDR4, 2400MHz, 32GB, Non-ECC, CL16', 5209, 'memorias usb', 5],
    [62, "Makena Smart TV LED 32S2 32'', HD, Widescreen, Gris", 2899, 'pantallas', 6],
    [63, 'Seiki TV LED SC-39HS950N 38.5, HD, Widescreen, Negro', 3369, 'pantallas', 146],
    [64, 'Samsung TV LED LH43QMREBGCXGO 43, 4K Ultra HD, Widescreen, Negro', 12029, 'pantallas', 71],
    [65, 'Samsung Smart TV LED UN70RU7100FXZX 70, 4K Ultra HD, Widescreen, Negro', 21079, 'pantallas', 7],
    [66, 'TCL Smart TV LED 55S425 54.6, 4K Ultra HD, Widescreen, Negro', 8049, 'pantallas', 188],
    [67, 'TV Monitor LED 24TL520S-PU 24, HD, Widescreen, HDMI, Negro', 3229, 'pantallas', 411],
    [68, "Makena Smart TV LED 40S2 40'', Full HD, Widescreen, Negro", 4229, 'pantallas', 239],
    [69, 'Hisense Smart TV LED 40H5500F 39.5, Full HD, Widescreen, Negro', 5359, 'pantallas', 94],
    [70, 'Samsung Smart TV LED 43, Full HD, Widescreen, Negro', 7679, 'pantallas', 10],
    [71, 'Samsung Smart TV LED UN32J4290AF 32, HD, Widescreen, Negro', 4829, 'pantallas', 3],
    [72, 'Hisense Smart TV LED 50H8F 49.5, 4K Ultra HD, Widescreen, Negro', 9759, 'pantallas', 11],
    [73, 'Samsung Smart TV LED UN55TU7000FXZX 55, 4K Ultra HD, Widescreen, Negro/Gris', 10559, 'pantallas', 4],
    [74, 'Logitech Bocinas para Computadora con Subwoofer G560, Bluetooth, Inalámbrico, 2.1, 120W RMS, USB, negro', 4239, 'bocinas', 1],
    [75, 'Lenovo Barra de Sonido, Alámbrico, 2.5W, USB, Negro', 441, 'bocinas', 11],
    [76, 'Acteck Bocina con Subwoofer AXF-290, Bluetooth, Inalámbrico, 2.1, 18W RMS, 180W PMPO, USB, Negro', 589, 'bocinas', 18],
    [77, 'Verbatim Bocina Portátil Mini, Bluetooth, Inalámbrico, 3W RMS, USB, Blanco', 178, 'bocinas', 1],
    [78, 'Ghia Bocina Portátil BX300, Bluetooth, Inalámbrico, 40W RMS, USB, Rojo - Resistente al Agua', 769, 'bocinas', 2],
    [79, 'Naceb Bocina Portátil NA-0301, Bluetooth, Inalámbrico, USB 2.0, Rojo', 709, 'bocinas', 31],
    [80, 'Ghia Bocina Portátil BX800, Bluetooth, Inalámbrico, 2.1 Canales, 31W, USB, Negro', 1359, 'bocinas', 15],
    [81, 'Ghia Bocina Portátil BX900, Bluetooth, Inalámbrico, 2.1 Canales, 34W, USB, Negro - Resistente al Agua', 1169, 'bocinas', 20],
    [82, 'Ghia Bocina Portátil BX400, Bluetooth, Inalámbrico, 8W RMS, USB, Negro', 549, 'bocinas', 31],
    [83, 'Ghia Bocina Portátil BX500, Bluetooth, Inalámbrico, 10W RMS, USB, Gris', 499, 'bocinas', 16],
    [84, 'Logitech Audífonos Gamer G332, Alámbrico, 2 Metros, 3.5mm, Negro/Rojo', 1089, 'audifonos', 83],
    [85, 'Logitech Audífonos Gamer G635 7.1, Alámbrico, 1.5 Metros, 3.5mm, Negro/Azul', 2159, 'audifonos', 39],
    [86, 'ASUS Audífonos Gamer ROG Theta 7.1, Alámbrico, USB C, Negro', 8359, 'audifonos', 20],
    [87, 'Acer Audífonos Gamer Galea 300, Alámbrico, 3.5mm, Negro', 1719, 'audifonos', 8],
    [88, 'Audífonos Gamer Balam Rush Orphix RGB 7.1, Alámbrico, USB, Negro', 909, 'audifonos', 15],
    [89, 'Cougar Audífonos Gamer Phontum Essential, Alámbrico, 1.9 Metros, 3.5mm, Negro.', 859, 'audifonos', 4],
    [90, 'Energy Sistem Audífonos con Micrófono Headphones 1, Bluetooh, Inalámbrico, Negro/Grafito', 539, 'audifonos', 1],
    [91, 'Genius GHP-400S Audífonos, Alámbrico, 1.5 Metros, Rosa', 137, 'audifonos', 16],
    [92, 'Getttech Audífonos con Micrófono Sonority, Alámbrico, 1.2 Metros, 3.5mm, Negro/Rosa', 149, 'audifonos', 232],
    [93, 'Ginga Audífonos con Micrófono GI18ADJ01BT-RO, Bluetooth, Alámbrico/Inalámbrico, 3.5mm, Rojo', 160, 'audifonos', 139],
    [94, 'HyperX Audífonos Gamer Cloud Flight para PC/PS4/PS4 Pro, Inalámbrico, USB, 3.5mm, Negro', 2869, 'audifonos', 12],
    [95, 'Iogear Audífonos Gamer GHG601, Alámbrico, 1.2 Metros, 3.5mm, Negro', 999, 'audifonos', 2],
    [96, 'Klip Xtreme Audífonos Blast, Bluetooth, Inalámbrico, Negro/Verde', 769, 'audifonos', 2]
]

lifestore_sales = [
    [1, 1, 5, '24/07/2020', 0],
    [2, 1, 5, '27/07/2020', 0],
    [3, 2, 5, '24/02/2020', 0],
    [4, 2, 5, '22/05/2020', 0],
    [5, 2, 5, '01/01/2020', 0],
    [6, 2, 5, '24/04/2020', 0],
    [7, 2, 4, '31/01/2020', 0],
    [8, 2, 4, '07/02/2020', 0],
    [9, 2, 4, '02/03/2020', 0],
    [10, 2, 4, '07/03/2020', 0],
    [11, 2, 4, '24/03/2020', 0],
    [12, 2, 4, '24/04/2020', 0],
    [13, 2, 4, '02/05/2020', 0],
    [14, 2, 4, '03/06/2020', 0],
    [15, 2, 3, '10/11/2019', 1],
    [16, 3, 5, '21/07/2020', 0],
    [17, 3, 4, '21/07/2020', 0],
    [18, 3, 5, '11/06/2020', 0],
    [19, 3, 5, '11/06/2020', 0],
    [20, 3, 5, '20/05/2020', 0],
    [21, 3, 5, '15/05/2020', 0],
    [22, 3, 5, '02/05/2020', 0],
    [23, 3, 5, '30/04/2020', 0],
    [24, 3, 5, '27/04/2020', 0],
    [25, 3, 4, '22/04/2020', 0],
    [26, 3, 5, '19/04/2020', 0],
    [27, 3, 5, '16/04/2020', 0],
    [28, 3, 3, '14/04/2020', 0],
    [29, 3, 5, '14/04/2020', 0],
    [30, 3, 5, '14/04/2020', 0],
    [31, 3, 5, '13/04/2020', 0],
    [32, 3, 5, '13/04/2020', 0],
    [33, 3, 5, '06/04/2020', 0],
    [34, 3, 5, '02/04/2020', 0],
    [35, 3, 5, '01/04/2020', 0],
    [36, 3, 5, '16/03/2020', 0],
    [37, 3, 5, '11/03/2020', 0],
    [38, 3, 4, '10/03/2020', 0],
    [39, 3, 5, '02/03/2020', 0],
    [40, 3, 5, '27/02/2020', 0],
    [41, 3, 4, '27/02/2020', 0],
    [42, 3, 5, '03/02/2020', 0],
    [43, 3, 5, '31/01/2020', 0],
    [44, 3, 5, '30/01/2020', 0],
    [45, 3, 5, '28/01/2020', 0],
    [46, 3, 5, '25/01/2020', 0],
    [47, 3, 5, '19/01/2020', 0],
    [48, 3, 5, '13/01/2020', 0],
    [49, 3, 5, '11/01/2020', 0],
    [50, 3, 4, '09/01/2020', 0],
    [51, 3, 5, '08/01/2020', 0],
    [52, 3, 4, '06/01/2020', 0],
    [53, 3, 5, '04/01/2020', 0],
    [54, 3, 5, '04/01/2020', 0],
    [55, 3, 5, '03/01/2020', 0],
    [56, 3, 5, '02/01/2020', 0],
    [57, 3, 5, '01/01/2020', 0],
    [58, 4, 4, '19/06/2020', 0],
    [59, 4, 4, '04/06/2020', 0],
    [60, 4, 5, '16/04/2020', 0],
    [61, 4, 4, '07/04/2020', 0],
    [62, 4, 5, '06/04/2020', 0],
    [63, 4, 5, '06/04/2020', 0],
    [64, 4, 5, '30/03/2020', 0],
    [65, 4, 4, '08/03/2020', 0],
    [66, 4, 5, '25/02/2020', 0],
    [67, 4, 3, '29/01/2020', 0],
    [68, 4, 5, '23/01/2020', 0],
    [69, 4, 4, '11/01/2020', 0],
    [70, 4, 5, '09/01/2020', 0],
    [71, 5, 4, '03/07/2020', 0],
    [72, 5, 4, '14/05/2020', 0],
    [73, 5, 4, '05/05/2020', 0],
    [74, 5, 5, '04/05/2020', 0],
    [75, 5, 4, '04/05/2020', 0],
    [76, 5, 5, '03/05/2020', 0],
    [77, 5, 5, '26/04/2020', 0],
    [78, 5, 5, '23/04/2020', 0],
    [79, 5, 5, '17/04/2020', 0],
    [80, 5, 5, '13/04/2020', 0],
    [81, 5, 5, '06/04/2020', 0],
    [82, 5, 5, '26/04/2020', 0],
    [83, 5, 5, '24/03/2020', 0],
    [84, 5, 5, '22/03/2020', 0],
    [85, 5, 4, '10/03/2020', 0],
    [86, 5, 5, '25/02/2020', 0],
    [87, 5, 4, '24/02/2020', 0],
    [88, 5, 5, '15/02/2020', 0],
    [89, 5, 5, '30/01/2020', 0],
    [90, 5, 5, '17/01/2020', 0],
    [91, 6, 5, '05/05/2020', 0],
    [92, 6, 5, '22/03/2020', 0],
    [93, 6, 5, '04/02/2020', 0],
    [94, 7, 5, '25/07/2020', 0],
    [95, 7, 5, '17/06/2020', 0],
    [96, 7, 5, '15/04/2020', 0],
    [97, 7, 5, '03/04/2020', 0],
    [98, 7, 5, '31/03/2020', 0],
    [99, 7, 5, '28/03/2020', 0],
    [100, 7, 5, '22/02/2020', 0],
    [101, 8, 5, '20/04/2020', 0],
    [102, 8, 5, '16/02/2020', 0],
    [103, 8, 5, '27/01/2020', 0],
    [104, 8, 5, '20/01/2020', 0],
    [105, 10, 4, '14/05/2020', 0],
    [106, 11, 5, '30/06/2020', 0],
    [107, 11, 5, '02/04/2020', 0],
    [108, 11, 5, '05/03/2020', 0],
    [109, 12, 5, '05/05/2020', 0],
    [110, 12, 4, '09/04/2020', 0],
    [111, 12, 5, '09/04/2020', 0],
    [112, 12, 5, '02/04/2020', 0],
    [113, 12, 5, '25/03/2020', 0],
    [114, 12, 5, '24/03/2020', 0],
    [115, 12, 5, '06/03/2020', 0],
    [116, 12, 5, '04/03/2020', 0],
    [117, 12, 4, '27/02/2020', 0],
    [118, 13, 4, '17/04/2020', 0],
    [119, 17, 1, '05/09/2020', 1],
    [120, 18, 5, '30/06/2020', 0],
    [121, 18, 4, '14/03/2020', 0],
    [122, 18, 5, '27/02/2020', 0],
    [123, 18, 4, '02/02/2020', 0],
    [124, 18, 4, '01/02/2020', 0],
    [125, 21, 5, '14/04/2020', 0],
    [126, 21, 5, '12/02/2020', 0],
    [127, 22, 5, '20/04/2020', 0],
    [128, 25, 5, '28/03/2020', 0],
    [129, 25, 5, '20/03/2020', 0],
    [130, 28, 5, '30/03/2020', 0],
    [131, 29, 4, '04/05/2020', 0],
    [132, 29, 5, '24/04/2020', 0],
    [133, 29, 4, '24/04/2020', 0],
    [134, 29, 4, '17/04/2020', 0],
    [135, 29, 5, '04/04/2020', 0],
    [136, 29, 5, '09/03/2020', 0],
    [137, 29, 5, '07/03/2020', 0],
    [138, 29, 5, '26/02/2020', 0],
    [139, 29, 5, '09/02/2020', 0],
    [140, 29, 5, '06/02/2020', 0],
    [141, 29, 5, '26/01/2020', 0],
    [142, 29, 4, '25/01/2020', 0],
    [143, 29, 1, '13/01/2020', 1],
    [144, 29, 1, '10/01/2020', 0],
    [145, 31, 1, '02/05/2020', 1],
    [146, 31, 1, '02/05/2020', 1],
    [147, 31, 1, '01/04/2020', 1],
    [148, 31, 4, '20/03/2020', 0],
    [149, 31, 3, '14/03/2020', 0],
    [150, 31, 1, '11/01/2020', 0],
    [151, 33, 5, '20/03/2020', 0],
    [152, 33, 4, '27/02/2020', 0],
    [153, 40, 5, '24/05/2020', 0],
    [154, 42, 5, '27/07/2020', 0],
    [155, 42, 5, '04/05/2020', 0],
    [156, 42, 4, '04/05/2020', 0],
    [157, 42, 4, '04/05/2020', 0],
    [158, 42, 5, '04/05/2020', 0],
    [159, 42, 5, '27/04/2020', 0],
    [160, 42, 5, '26/04/2020', 0],
    [161, 42, 4, '19/04/2020', 0],
    [162, 42, 5, '14/04/2020', 0],
    [163, 42, 5, '09/04/2020', 0],
    [164, 42, 4, '05/04/2020', 0],
    [165, 42, 4, '21/03/2020', 0],
    [166, 42, 5, '09/03/2020', 0],
    [167, 42, 5, '09/03/2020', 0],
    [168, 42, 5, '03/03/2020', 0],
    [169, 42, 4, '23/02/2020', 0],
    [170, 42, 4, '03/02/2020', 0],
    [171, 42, 4, '09/01/2020', 0],
    [172, 44, 5, '16/04/2020', 0],
    [173, 44, 5, '11/04/2020', 0],
    [174, 44, 5, '21/03/2020', 0],
    [175, 44, 4, '02/03/2020', 0],
    [176, 44, 4, '01/03/2020', 0],
    [177, 44, 5, '05/01/2020', 0],
    [178, 45, 1, '11/02/2020', 1],
    [179, 46, 2, '07/03/2020', 1],
    [180, 47, 4, '02/07/2020', 0],
    [181, 47, 5, '10/06/2020', 0],
    [182, 47, 5, '18/04/2020', 0],
    [183, 47, 4, '16/04/2020', 0],
    [184, 47, 5, '08/04/2020', 0],
    [185, 47, 4, '07/04/2020', 0],
    [186, 47, 5, '23/03/2020', 0],
    [187, 47, 5, '10/03/2020', 0],
    [188, 47, 3, '11/02/2020', 0],
    [189, 47, 5, '18/01/2020', 0],
    [190, 47, 5, '17/01/2020', 0],
    [191, 48, 4, '02/08/2020', 0],
    [192, 48, 3, '27/04/2020', 0],
    [193, 48, 5, '25/04/2020', 0],
    [194, 48, 5, '23/04/2020', 0],
    [195, 48, 5, '22/02/2020', 0],
    [196, 48, 5, '10/02/2020', 0],
    [197, 48, 5, '14/01/2020', 0],
    [198, 48, 5, '09/01/2020', 0],
    [199, 48, 5, '09/01/2020', 0],
    [200, 49, 5, '06/04/2020', 0],
    [201, 49, 5, '19/04/2020', 0],
    [202, 49, 5, '22/04/2020', 0],
    [203, 50, 5, '04/05/2020', 0],
    [204, 51, 5, '23/03/2020', 0],
    [205, 51, 4, '04/02/2020', 0],
    [206, 51, 5, '03/01/2020', 0],
    [207, 52, 5, '19/03/2020', 0],
    [208, 52, 5, '02/01/2020', 0],
    [209, 54, 4, '03/08/2020', 0],
    [210, 54, 5, '02/08/2020', 0],
    [211, 54, 5, '04/07/2020', 0],
    [212, 54, 5, '01/07/2020', 0],
    [213, 54, 5, '03/06/2020', 0],
    [214, 54, 5, '23/05/2020', 0],
    [215, 54, 4, '15/05/2020', 0],
    [216, 54, 5, '11/05/2020', 0],
    [217, 54, 5, '08/05/2020', 0],
    [218, 54, 5, '04/05/2020', 0],
    [219, 54, 4, '04/05/2002', 0],
    [220, 54, 5, '04/05/2020', 0],
    [221, 54, 5, '04/05/2020', 0],
    [222, 54, 4, '30/04/2020', 0],
    [223, 54, 4, '24/04/2020', 0],
    [224, 54, 5, '23/04/2020', 0],
    [225, 54, 4, '17/04/2020', 0],
    [226, 54, 5, '15/04/2020', 0],
    [227, 54, 5, '14/04/2020', 0],
    [228, 54, 4, '14/04/2020', 0],
    [229, 54, 5, '13/04/2020', 0],
    [230, 54, 5, '13/04/2020', 0],
    [231, 54, 5, '13/04/2020', 0],
    [232, 54, 5, '09/04/2020', 0],
    [233, 54, 5, '03/04/2020', 0],
    [234, 54, 5, '03/04/2020', 0],
    [235, 54, 5, '30/03/2020', 0],
    [236, 54, 5, '26/03/2020', 0],
    [237, 54, 5, '20/03/2020', 0],
    [238, 54, 2, '19/03/2020', 1],
    [239, 54, 5, '17/03/2020', 0],
    [240, 54, 5, '14/03/2020', 0],
    [241, 54, 5, '13/03/2020', 0],
    [242, 54, 4, '02/03/2020', 0],
    [243, 54, 5, '01/03/2020', 0],
    [244, 54, 5, '25/02/2020', 0],
    [245, 54, 5, '20/02/2020', 0],
    [246, 54, 4, '17/02/2020', 0],
    [247, 54, 5, '14/02/2020', 0],
    [248, 54, 5, '12/02/2020', 0],
    [249, 54, 4, '10/02/2020', 0],
    [250, 54, 5, '07/02/2020', 0],
    [251, 54, 5, '31/01/2020', 0],
    [252, 54, 5, '30/01/2020', 0],
    [253, 54, 5, '29/01/2020', 0],
    [254, 54, 5, '27/01/2020', 0],
    [255, 54, 5, '25/01/2020', 0],
    [256, 54, 5, '23/01/2020', 0],
    [257, 54, 5, '23/01/2020', 0],
    [258, 54, 4, '22/01/2020', 0],
    [259, 57, 5, '05/07/2020', 0],
    [260, 57, 5, '23/05/2020', 0],
    [261, 57, 5, '23/05/2020', 0],
    [262, 57, 5, '01/05/2020', 0],
    [263, 57, 5, '06/04/2020', 0],
    [264, 57, 5, '09/03/2020', 0],
    [265, 57, 5, '25/02/2020', 0],
    [266, 57, 5, '10/02/2020', 0],
    [267, 57, 4, '04/02/2020', 0],
    [268, 57, 5, '04/02/2020', 0],
    [269, 57, 5, '28/01/2020', 0],
    [270, 57, 5, '27/01/2020', 0],
    [271, 57, 4, '22/01/2020', 0],
    [272, 57, 5, '08/01/2020', 0],
    [273, 57, 5, '07/01/2020', 0],
    [274, 60, 5, '17/06/2020', 0],
    [275, 66, 5, '06/05/2020', 0],
    [276, 67, 5, '24/04/2020', 0],
    [277, 74, 4, '12/02/2020', 0],
    [278, 74, 5, '18/02/2020', 0],
    [279, 84, 5, '05/05/2020', 0],
    [280, 85, 5, '05/05/2020', 0],
    [281, 85, 5, '28/04/2020', 0],
    [282, 89, 3, '06/01/2020', 0],
    [283, 94, 4, '10/04/2020', 0]
]

lifestore_searches = [
    [1, 1],
    [2, 1],
    [3, 1],
    [4, 1],
    [5, 1],
    [6, 1],
    [7, 1],
    [8, 1],
    [9, 1],
    [10, 1],
    [11, 2],
    [12, 2],
    [13, 2],
    [14, 2],
    [15, 2],
    [16, 2],
    [17, 2],
    [18, 2],
    [19, 2],
    [20, 2],
    [21, 2],
    [22, 2],
    [23, 2],
    [24, 2],
    [25, 2],
    [26, 2],
    [27, 2],
    [28, 2],
    [29, 2],
    [30, 2],
    [31, 2],
    [32, 2],
    [33, 2],
    [34, 2],
    [35, 3],
    [36, 3],
    [37, 3],
    [38, 3],
    [39, 3],
    [40, 3],
    [41, 3],
    [42, 3],
    [43, 3],
    [44, 3],
    [45, 3],
    [46, 3],
    [47, 3],
    [48, 3],
    [49, 3],
    [50, 3],
    [51, 3],
    [52, 3],
    [53, 3],
    [54, 3],
    [55, 3],
    [56, 3],
    [57, 3],
    [58, 3],
    [59, 3],
    [60, 3],
    [61, 3],
    [62, 3],
    [63, 3],
    [64, 3],
    [65, 3],
    [66, 3],
    [67, 3],
    [68, 3],
    [69, 3],
    [70, 3],
    [71, 3],
    [72, 3],
    [73, 3],
    [74, 3],
    [75, 3],
    [76, 3],
    [77, 3],
    [78, 3],
    [79, 3],
    [80, 3],
    [81, 3],
    [82, 3],
    [83, 3],
    [84, 3],
    [85, 3],
    [86, 3],
    [87, 3],
    [88, 3],
    [89, 3],
    [90, 4],
    [91, 4],
    [92, 4],
    [93, 4],
    [94, 4],
    [95, 4],
    [96, 4],
    [97, 4],
    [98, 4],
    [99, 4],
    [100, 4],
    [101, 4],
    [102, 4],
    [103, 4],
    [104, 4],
    [105, 4],
    [106, 4],
    [107, 4],
    [108, 4],
    [109, 4],
    [110, 4],
    [111, 4],
    [112, 4],
    [113, 4],
    [114, 4],
    [115, 4],
    [116, 4],
    [117, 4],
    [118, 4],
    [119, 4],
    [120, 4],
    [121, 4],
    [122, 4],
    [123, 4],
    [124, 4],
    [125, 4],
    [126, 4],
    [127, 4],
    [128, 4],
    [129, 4],
    [130, 4],
    [131, 5],
    [132, 5],
    [133, 5],
    [134, 5],
    [135, 5],
    [136, 5],
    [137, 5],
    [138, 5],
    [139, 5],
    [140, 5],
    [141, 5],
    [142, 5],
    [143, 5],
    [144, 5],
    [145, 5],
    [146, 5],
    [147, 5],
    [148, 5],
    [149, 5],
    [150, 5],
    [151, 5],
    [152, 5],
    [153, 5],
    [154, 5],
    [155, 5],
    [156, 5],
    [157, 5],
    [158, 5],
    [159, 5],
    [160, 5],
    [161, 6],
    [162, 6],
    [163, 6],
    [164, 6],
    [165, 6],
    [166, 6],
    [167, 6],
    [168, 6],
    [169, 6],
    [170, 6],
    [171, 7],
    [172, 7],
    [173, 7],
    [174, 7],
    [175, 7],
    [176, 7],
    [177, 7],
    [178, 7],
    [179, 7],
    [180, 7],
    [181, 7],
    [182, 7],
    [183, 7],
    [184, 7],
    [185, 7],
    [186, 7],
    [187, 7],
    [188, 7],
    [189, 7],
    [190, 7],
    [191, 7],
    [192, 7],
    [193, 7],
    [194, 7],
    [195, 7],
    [196, 7],
    [197, 7],
    [198, 7],
    [199, 7],
    [200, 7],
    [201, 7],
    [202, 8],
    [203, 8],
    [204, 8],
    [205, 8],
    [206, 8],
    [207, 8],
    [208, 8],
    [209, 8],
    [210, 8],
    [211, 8],
    [212, 8],
    [213, 8],
    [214, 8],
    [215, 8],
    [216, 8],
    [217, 8],
    [218, 8],
    [219, 8],
    [220, 8],
    [221, 8],
    [222, 9],
    [223, 10],
    [224, 11],
    [225, 11],
    [226, 11],
    [227, 11],
    [228, 11],
    [229, 12],
    [230, 12],
    [231, 12],
    [232, 12],
    [233, 12],
    [234, 12],
    [235, 12],
    [236, 12],
    [237, 12],
    [238, 12],
    [239, 12],
    [240, 12],
    [241, 12],
    [242, 12],
    [243, 12],
    [244, 13],
    [245, 13],
    [246, 15],
    [247, 15],
    [248, 15],
    [249, 15],
    [250, 17],
    [251, 17],
    [252, 17],
    [253, 18],
    [254, 18],
    [255, 18],
    [256, 18],
    [257, 18],
    [258, 18],
    [259, 18],
    [260, 18],
    [261, 18],
    [262, 18],
    [263, 18],
    [264, 21],
    [265, 21],
    [266, 21],
    [267, 21],
    [268, 21],
    [269, 21],
    [270, 21],
    [271, 21],
    [272, 21],
    [273, 21],
    [274, 21],
    [275, 21],
    [276, 21],
    [277, 21],
    [278, 21],
    [279, 22],
    [280, 22],
    [281, 22],
    [282, 22],
    [283, 22],
    [284, 25],
    [285, 25],
    [286, 25],
    [287, 25],
    [288, 25],
    [289, 25],
    [290, 25],
    [291, 25],
    [292, 25],
    [293, 25],
    [294, 26],
    [295, 26],
    [296, 26],
    [297, 26],
    [298, 26],
    [299, 27],
    [300, 28],
    [301, 28],
    [302, 28],
    [303, 28],
    [304, 28],
    [305, 29],
    [306, 29],
    [307, 29],
    [308, 29],
    [309, 29],
    [310, 29],
    [311, 29],
    [312, 29],
    [313, 29],
    [314, 29],
    [315, 29],
    [316, 29],
    [317, 29],
    [318, 29],
    [319, 29],
    [320, 29],
    [321, 29],
    [322, 29],
    [323, 29],
    [324, 29],
    [325, 29],
    [326, 29],
    [327, 29],
    [328, 29],
    [329, 29],
    [330, 29],
    [331, 29],
    [332, 29],
    [333, 29],
    [334, 29],
    [335, 29],
    [336, 29],
    [337, 29],
    [338, 29],
    [339, 29],
    [340, 29],
    [341, 29],
    [342, 29],
    [343, 29],
    [344, 29],
    [345, 29],
    [346, 29],
    [347, 29],
    [348, 29],
    [349, 29],
    [350, 29],
    [351, 29],
    [352, 29],
    [353, 29],
    [354, 29],
    [355, 29],
    [356, 29],
    [357, 29],
    [358, 29],
    [359, 29],
    [360, 29],
    [361, 29],
    [362, 29],
    [363, 29],
    [364, 29],
    [365, 31],
    [366, 31],
    [367, 31],
    [368, 31],
    [369, 31],
    [370, 31],
    [371, 31],
    [372, 31],
    [373, 31],
    [374, 31],
    [375, 35],
    [376, 39],
    [377, 39],
    [378, 39],
    [379, 40],
    [380, 40],
    [381, 40],
    [382, 40],
    [383, 40],
    [384, 40],
    [385, 40],
    [386, 40],
    [387, 40],
    [388, 40],
    [389, 42],
    [390, 42],
    [391, 42],
    [392, 42],
    [393, 42],
    [394, 42],
    [395, 42],
    [396, 42],
    [397, 42],
    [398, 42],
    [399, 42],
    [400, 42],
    [401, 42],
    [402, 42],
    [403, 42],
    [404, 42],
    [405, 42],
    [406, 42],
    [407, 42],
    [408, 42],
    [409, 42],
    [410, 42],
    [411, 42],
    [412, 44],
    [413, 44],
    [414, 44],
    [415, 44],
    [416, 44],
    [417, 44],
    [418, 44],
    [419, 44],
    [420, 44],
    [421, 44],
    [422, 44],
    [423, 44],
    [424, 44],
    [425, 44],
    [426, 44],
    [427, 44],
    [428, 44],
    [429, 44],
    [430, 44],
    [431, 44],
    [432, 44],
    [433, 44],
    [434, 44],
    [435, 44],
    [436, 44],
    [437, 45],
    [438, 46],
    [439, 46],
    [440, 46],
    [441, 46],
    [442, 47],
    [443, 47],
    [444, 47],
    [445, 47],
    [446, 47],
    [447, 47],
    [448, 47],
    [449, 47],
    [450, 47],
    [451, 47],
    [452, 47],
    [453, 47],
    [454, 47],
    [455, 47],
    [456, 47],
    [457, 47],
    [458, 47],
    [459, 47],
    [460, 47],
    [461, 47],
    [462, 47],
    [463, 47],
    [464, 47],
    [465, 47],
    [466, 47],
    [467, 47],
    [468, 47],
    [469, 47],
    [470, 47],
    [471, 47],
    [472, 48],
    [473, 48],
    [474, 48],
    [475, 48],
    [476, 48],
    [477, 48],
    [478, 48],
    [479, 48],
    [480, 48],
    [481, 48],
    [482, 48],
    [483, 48],
    [484, 48],
    [485, 48],
    [486, 48],
    [487, 48],
    [488, 48],
    [489, 48],
    [490, 48],
    [491, 48],
    [492, 48],
    [493, 48],
    [494, 48],
    [495, 48],
    [496, 48],
    [497, 48],
    [498, 48],
    [499, 49],
    [500, 49],
    [501, 49],
    [502, 49],
    [503, 49],
    [504, 49],
    [505, 49],
    [506, 49],
    [507, 49],
    [508, 49],
    [509, 50],
    [510, 50],
    [511, 50],
    [512, 50],
    [513, 50],
    [514, 50],
    [515, 50],
    [516, 51],
    [517, 51],
    [518, 51],
    [519, 51],
    [520, 51],
    [521, 51],
    [522, 51],
    [523, 51],
    [524, 51],
    [525, 51],
    [526, 51],
    [527, 52],
    [528, 52],
    [529, 52],
    [530, 52],
    [531, 52],
    [532, 54],
    [533, 54],
    [534, 54],
    [535, 54],
    [536, 54],
    [537, 54],
    [538, 54],
    [539, 54],
    [540, 54],
    [541, 54],
    [542, 54],
    [543, 54],
    [544, 54],
    [545, 54],
    [546, 54],
    [547, 54],
    [548, 54],
    [549, 54],
    [550, 54],
    [551, 54],
    [552, 54],
    [553, 54],
    [554, 54],
    [555, 54],
    [556, 54],
    [557, 54],
    [558, 54],
    [559, 54],
    [560, 54],
    [561, 54],
    [562, 54],
    [563, 54],
    [564, 54],
    [565, 54],
    [566, 54],
    [567, 54],
    [568, 54],
    [569, 54],
    [570, 54],
    [571, 54],
    [572, 54],
    [573, 54],
    [574, 54],
    [575, 54],
    [576, 54],
    [577, 54],
    [578, 54],
    [579, 54],
    [580, 54],
    [581, 54],
    [582, 54],
    [583, 54],
    [584, 54],
    [585, 54],
    [586, 54],
    [587, 54],
    [588, 54],
    [589, 54],
    [590, 54],
    [591, 54],
    [592, 54],
    [593, 54],
    [594, 54],
    [595, 54],
    [596, 54],
    [597, 54],
    [598, 54],
    [599, 54],
    [600, 54],
    [601, 54],
    [602, 54],
    [603, 54],
    [604, 54],
    [605, 54],
    [606, 54],
    [607, 54],
    [608, 54],
    [609, 54],
    [610, 54],
    [611, 54],
    [612, 54],
    [613, 54],
    [614, 54],
    [615, 54],
    [616, 54],
    [617, 54],
    [618, 54],
    [619, 54],
    [620, 54],
    [621, 54],
    [622, 54],
    [623, 54],
    [624, 54],
    [625, 54],
    [626, 54],
    [627, 54],
    [628, 54],
    [629, 54],
    [630, 54],
    [631, 54],
    [632, 54],
    [633, 54],
    [634, 54],
    [635, 54],
    [636, 54],
    [637, 54],
    [638, 54],
    [639, 54],
    [640, 54],
    [641, 54],
    [642, 54],
    [643, 54],
    [644, 54],
    [645, 54],
    [646, 54],
    [647, 54],
    [648, 54],
    [649, 54],
    [650, 54],
    [651, 54],
    [652, 54],
    [653, 54],
    [654, 54],
    [655, 54],
    [656, 54],
    [657, 54],
    [658, 54],
    [659, 54],
    [660, 54],
    [661, 54],
    [662, 54],
    [663, 54],
    [664, 54],
    [665, 54],
    [666, 54],
    [667, 54],
    [668, 54],
    [669, 54],
    [670, 54],
    [671, 54],
    [672, 54],
    [673, 54],
    [674, 54],
    [675, 54],
    [676, 54],
    [677, 54],
    [678, 54],
    [679, 54],
    [680, 54],
    [681, 54],
    [682, 54],
    [683, 54],
    [684, 54],
    [685, 54],
    [686, 54],
    [687, 54],
    [688, 54],
    [689, 54],
    [690, 54],
    [691, 54],
    [692, 54],
    [693, 54],
    [694, 54],
    [695, 54],
    [696, 54],
    [697, 54],
    [698, 54],
    [699, 54],
    [700, 54],
    [701, 54],
    [702, 54],
    [703, 54],
    [704, 54],
    [705, 54],
    [706, 54],
    [707, 54],
    [708, 54],
    [709, 54],
    [710, 54],
    [711, 54],
    [712, 54],
    [713, 54],
    [714, 54],
    [715, 54],
    [716, 54],
    [717, 54],
    [718, 54],
    [719, 54],
    [720, 54],
    [721, 54],
    [722, 54],
    [723, 54],
    [724, 54],
    [725, 54],
    [726, 54],
    [727, 54],
    [728, 54],
    [729, 54],
    [730, 54],
    [731, 54],
    [732, 54],
    [733, 54],
    [734, 54],
    [735, 54],
    [736, 54],
    [737, 54],
    [738, 54],
    [739, 54],
    [740, 54],
    [741, 54],
    [742, 54],
    [743, 54],
    [744, 54],
    [745, 54],
    [746, 54],
    [747, 54],
    [748, 54],
    [749, 54],
    [750, 54],
    [751, 54],
    [752, 54],
    [753, 54],
    [754, 54],
    [755, 54],
    [756, 54],
    [757, 54],
    [758, 54],
    [759, 54],
    [760, 54],
    [761, 54],
    [762, 54],
    [763, 54],
    [764, 54],
    [765, 54],
    [766, 54],
    [767, 54],
    [768, 54],
    [769, 54],
    [770, 54],
    [771, 54],
    [772, 54],
    [773, 54],
    [774, 54],
    [775, 54],
    [776, 54],
    [777, 54],
    [778, 54],
    [779, 54],
    [780, 54],
    [781, 54],
    [782, 54],
    [783, 54],
    [784, 54],
    [785, 54],
    [786, 54],
    [787, 54],
    [788, 54],
    [789, 54],
    [790, 54],
    [791, 54],
    [792, 54],
    [793, 54],
    [794, 54],
    [795, 56],
    [796, 56],
    [797, 57],
    [798, 57],
    [799, 57],
    [800, 57],
    [801, 57],
    [802, 57],
    [803, 57],
    [804, 57],
    [805, 57],
    [806, 57],
    [807, 57],
    [808, 57],
    [809, 57],
    [810, 57],
    [811, 57],
    [812, 57],
    [813, 57],
    [814, 57],
    [815, 57],
    [816, 57],
    [817, 57],
    [818, 57],
    [819, 57],
    [820, 57],
    [821, 57],
    [822, 57],
    [823, 57],
    [824, 57],
    [825, 57],
    [826, 57],
    [827, 57],
    [828, 57],
    [829, 57],
    [830, 57],
    [831, 57],
    [832, 57],
    [833, 57],
    [834, 57],
    [835, 57],
    [836, 57],
    [837, 57],
    [838, 57],
    [839, 57],
    [840, 57],
    [841, 57],
    [842, 57],
    [843, 57],
    [844, 57],
    [845, 57],
    [846, 57],
    [847, 57],
    [848, 57],
    [849, 57],
    [850, 57],
    [851, 57],
    [852, 57],
    [853, 57],
    [854, 57],
    [855, 57],
    [856, 57],
    [857, 57],
    [858, 57],
    [859, 57],
    [860, 57],
    [861, 57],
    [862, 57],
    [863, 57],
    [864, 57],
    [865, 57],
    [866, 57],
    [867, 57],
    [868, 57],
    [869, 57],
    [870, 57],
    [871, 57],
    [872, 57],
    [873, 57],
    [874, 57],
    [875, 57],
    [876, 57],
    [877, 57],
    [878, 57],
    [879, 57],
    [880, 57],
    [881, 57],
    [882, 57],
    [883, 57],
    [884, 57],
    [885, 57],
    [886, 57],
    [887, 57],
    [888, 57],
    [889, 57],
    [890, 57],
    [891, 57],
    [892, 57],
    [893, 57],
    [894, 57],
    [895, 57],
    [896, 57],
    [897, 57],
    [898, 57],
    [899, 57],
    [900, 57],
    [901, 57],
    [902, 57],
    [903, 57],
    [904, 59],
    [905, 63],
    [906, 63],
    [907, 63],
    [908, 63],
    [909, 66],
    [910, 66],
    [911, 66],
    [912, 66],
    [913, 66],
    [914, 66],
    [915, 66],
    [916, 66],
    [917, 66],
    [918, 66],
    [919, 66],
    [920, 66],
    [921, 66],
    [922, 66],
    [923, 66],
    [924, 67],
    [925, 67],
    [926, 67],
    [927, 67],
    [928, 67],
    [929, 67],
    [930, 67],
    [931, 67],
    [932, 67],
    [933, 67],
    [934, 67],
    [935, 67],
    [936, 67],
    [937, 67],
    [938, 67],
    [939, 67],
    [940, 67],
    [941, 67],
    [942, 67],
    [943, 67],
    [944, 67],
    [945, 67],
    [946, 67],
    [947, 67],
    [948, 67],
    [949, 67],
    [950, 67],
    [951, 67],
    [952, 67],
    [953, 67],
    [954, 67],
    [955, 67],
    [956, 70],
    [957, 73],
    [958, 73],
    [959, 73],
    [960, 73],
    [961, 74],
    [962, 74],
    [963, 74],
    [964, 74],
    [965, 74],
    [966, 74],
    [967, 76],
    [968, 76],
    [969, 80],
    [970, 84],
    [971, 84],
    [972, 84],
    [973, 84],
    [974, 84],
    [975, 84],
    [976, 84],
    [977, 84],
    [978, 84],
    [979, 84],
    [980, 85],
    [981, 85],
    [982, 85],
    [983, 85],
    [984, 85],
    [985, 85],
    [986, 85],
    [987, 85],
    [988, 85],
    [989, 85],
    [990, 85],
    [991, 85],
    [992, 85],
    [993, 85],
    [994, 85],
    [995, 85],
    [996, 85],
    [997, 85],
    [998, 85],
    [999, 85],
    [1000, 85],
    [1001, 85],
    [1002, 85],
    [1003, 85],
    [1004, 85],
    [1005, 85],
    [1006, 85],
    [1007, 85],
    [1008, 85],
    [1009, 85],
    [1010, 85],
    [1011, 85],
    [1012, 85],
    [1013, 85],
    [1014, 85],
    [1015, 89],
    [1016, 89],
    [1017, 89],
    [1018, 89],
    [1019, 89],
    [1020, 89],
    [1021, 89],
    [1022, 91],
    [1023, 91],
    [1024, 93],
    [1025, 94],
    [1026, 94],
    [1027, 94],
    [1028, 94],
    [1029, 94],
    [1030, 94],
    [1031, 95],
    [1032, 95],
    [1033, 95]
]



# Algunas aclaraciones importantes :
# La metodologia utilizada para abordar toda la obtención de la información es
# utilizar 2 listas que se complementen entre si, la lista 1 por ejemplo
# tendra etiquetas tipo strings como elementos los cuales representaran a la 
# información de la lista 2
# ejemplo:
#        lista1 = ["Grupo1", "Grupo2"] 
#      lista 2 = [[1,2,3,4],[5,6,7,8]]
# si utilizamos a la lista 1 para localizar la información asociada al grupo 1
# utilizando su posición podremos saber donde se encuentra su información en la 
# otra lista. POSICÓN Ó INDICE palabras clave para el abordaje y entendimiento
# del codigo
# 
# WARNING:
# estas listas agrupadas una vez creadas tendran un orden que debe conservarse
# solo los elementos de la jerarquia mas baja pueden ser aordenados y cambiados
# de posición

#                                  [     ]
# ---------------------------------[  1  ]--------------------------------------
#                                  [     ]
# Se obtuvo una lista con los años de las compras
# lifestore_sales = [id-compra,id-producto,score,date,refound]
# date nos es de interes, y tiene la fomra siguiente "dd/mm/aaaa"
# date esta en el indice [3] y tomando esa cadena el año esta en [6:10]
# ciclo for para iterar por todos los elemento.
# 
# estructuras : in (nos permite conocer si un elemento, objeto se encuentra en
# una colección salida True/False)
#               not : permite negar una expresión logica

años = []
for i in range(len(lifestore_sales)):
    if lifestore_sales[i][3][6:10] not in años:
      años.append(lifestore_sales[i][3][6:10])
aos=años[:]
#                                  [     ]
# ---------------------------------[  2  ]--------------------------------------
#                                  [     ]
# De con el mismo planteamiento anterior obtendremos las categorias del conjunto
# lifestore_products = [id-producto, nombre,precio,categoria, stock]
# salida esperada :
#categorias=['procesadores','tarjetas de video','tarjetas madre','discos duros',
#'memorias usb','pantallas','bocinas','audifonos']

categorias = []
for i in range(len(lifestore_products)):
    if lifestore_products[i][3] not in categorias:
      categorias.append(lifestore_products[i][3])

#                                  [     ]
# ---------------------------------[  3  ]--------------------------------------
#                                  [     ]
# Usamos la sentencia siguiente para obtener en una lista los meses que hay en
#un año, con la finalidad de utilizar la metodologia de "listas complementarias"
# termino propio.
# salida esperada : ["01","02",..,"12"]
meses = []
for i in range(1,13):
    if len(str(i))==1:
        meses.append("0"+ str(i))
    else:
        meses.append(str(i))
        

        

# La siguiente linea de codigo tienen como objetivo contar el numero de ventas
# por articulo cuardando la información en una lista con el siguiente formato
#             [id, numero de ventas, refound(1 ó 0)]
# refound tiene dos valores posibles 1 = True (si hubó un reembolso)
#                                    0 = False (no hubó reembolso)
conteo_ventas_totales = []

for p in lifestore_products:
    cont=0
    for s in lifestore_sales:
        if p[0]==s[1] and s[4]==0:
            cont+=1
    conteo_ventas_totales.append([p[0],cont,s[4]])
    
# Las siguientes lineas de codigo tienen como objetivo contar y guardar el 
# numero de busquedas y su id
#    [id, numero-busquedas]
conteo_busquedas_totales = []

for p in lifestore_products:
    cont=0
    for s in lifestore_searches:
        if p[0]==s[1]:
            cont+=1
    conteo_busquedas_totales.append([p[0],cont])

#                                  [     ]
# ---------------------------------[  4  ]--------------------------------------
#                                  [     ]   
# La siguientes lineas de codigo tienen como objetivo el tomar una lista de
# de elemenentos y ordenarla usando el metodo de burbuja
# a = es un parametro para en el caso de quere ordenar listas como elementos
# cuyo caracteristica de ordenamiento se encuentra en el indice "a"
# un ciclo while permite aplicar el ordenamiento repetidas veces hasta que
# se cumple una condión.
#
# La forma de ordenar : se compara un elemento en la posición i-esima con un
# elemento inmediatamente siguiente i+1-esima.
#
# condición : si el elemento en la posición i-esimo es menor que el siguiente
# elemento, si se cumple la condición se hara un intercambio entre elementos
# esto provocara que se ordenen de mayor a menor los elementos
#
# la condición para detener el bucle while es cuando comparan elementos pares
# contiguos.
#
# Se cumple que "los elementos estan ordenados si al iterar entre elementos
# pares de la colección, y sumando 1 a un contador cada que se cumple una
# desigualdad, si al iterar por toda la colección el contador es igual a 
# la longitud de la colección menos 1 la coleccion esta hecha"
# Se ordena la colección que guarda las ventas totales
# ------------------------------------------------------------------ordenamiento
a = 1
condicion=True
while condicion:
    for i in range(len(conteo_ventas_totales)-1):
        if conteo_ventas_totales[i][a]<conteo_ventas_totales[i+1][a]:
            conteo_ventas_totales[i],conteo_ventas_totales[i+1] =conteo_ventas_totales[i+1],conteo_ventas_totales[i]
    cont=0        
    for j in range(len(conteo_ventas_totales)-1):
        if conteo_ventas_totales[j][a]>=conteo_ventas_totales[j+1][a]:
            cont+=1
    if cont>=len(conteo_ventas_totales)-1:
        condicion=False      
# ------------------------------------------------------------------ordenamiento

# Se aplica la misma estructura vista en el bloque B[4] consultarlo para mas
# información
# se ordena la lista que contiene las busquedas totales de mayores busquedas a
#menores
# utilizando "listas complementarias"
# ------------------------------------------------------------------ordenamiento
a = 1

condicion=True
while condicion:
    for i in range(len(conteo_busquedas_totales)-1):
        if conteo_busquedas_totales[i][a]<conteo_busquedas_totales[i+1][a]:
            conteo_busquedas_totales[i],conteo_busquedas_totales[i+1] = conteo_busquedas_totales[i+1],conteo_busquedas_totales[i]
    cont=0        
    for j in range(len(conteo_busquedas_totales)-1):
        if conteo_busquedas_totales[j][a]>=conteo_busquedas_totales[j+1][a]:
            cont+=1
    if cont>=len(conteo_busquedas_totales)-1:
        condicion=False      
# ------------------------------------------------------------------ordenamiento

# variable que contiene las listas de 15 mejores ventas y 20 mejores busquedas
# obteniendo una rebana de 15 elementos y una de 20 elementos
conteo_mejores_ventas = conteo_ventas_totales[:15]
conteo_mejores_busquedas = conteo_busquedas_totales[:20]

#----------- Termina 1.1 : listas con mayores ventas y busquedas----------------


# se crea una nueva lista, la cual sera una colección de las ventas totales de
# lifestore, dividida en años y cada año en subcategoria
#
# clasificacion_ventas_ac = [[2020],                         [2019],[2002]]
#               ¨[[procesadores, tarjetas video,...,bocinas],[...], [...]]
#    [[[id,año,categoria,refound],[id,año,categoria,refound],[...]],[...],...]
#
# para poder colocar un elemento en cada categoria debe de cumplir una condición
# ya sea que la venta sea la misma que el año en el tiempo presente del codigo
# y que el producto asociado a la compra pertenezca a la categoria de productos
# utilizando "listas complementarias"
clasificacion_ventas_ac = []
for año in años:
    ls_c = []
    for categoria in categorias:
        ls = []
        for p in lifestore_products:
            for s in lifestore_sales:
                if s[1]==p[0] and año==s[3][6:10] and categoria==p[3] and s[4]==0:
                    ls.append([s[1],s[3],p[3], s[4]])
        ls_c.append(ls)
    clasificacion_ventas_ac.append(ls_c)
    
# Se crea una nueva lista, coleccion de las busquedas totales separadas por 
# categorias de productos.
# clasificacion_busquedas_c = [procesadores, tarjeras madre,...,bocinas]
#       [[id,categoria],[id,categoria],...],[[id,categoria],[id,categoria],...]
# utilizando "listas complementarias"
# para colocarse en cada lista deben de cumplir las condiciones de que la
# busqueda asociada a ese producto pertenece a la categoria correcta
clasificacion_busquedas_c = []
for categoria in categorias:
    ls = []
    for p in lifestore_products:
        for s in lifestore_searches:
            if s[1]==p[0] and categoria==p[3]:
                ls.append([s[1],p[3]])
    clasificacion_busquedas_c.append(ls)

# Se creara una lista que contendra la cantidad de ventas asociada a cada
# producto de cada categoria de cada año
conteo_ventas_ac = []

for año in años:
    lc=[]
    for categoria in categorias:
        l = []
        for p in lifestore_products:
            cont=0

#                                  [     ]
# ---------------------------------[  5  ]--------------------------------------
#                                  [     ]           
# Las siguientes lineas de codigo son muy importantes, ya que permite utilizar
# las "listas complementarias" ya que permite acceder a la posición de la etiqueta
# la cual esta asociada a los datos de esa etiquetda dentro de la jerarquia
# el bloque de codigo recibe una lista (contiene todas las etiquetas) y recibe 
# una etiqueta para poder buscarla en la lista 1 asociada y obtener su posición
# se podria decir que es un analogo al metodo lista.index(elemento) que devulve
# su posición, solo que esta forma fue hecha con las estructuras basicas.

# nos devuelve la posicón de lo que el elemento año se encuentre en la lista
# años, a demas de ser una forma mas intuitiva.
# si el elemento existe dentro de lista devolvera la posición, de lo contrario
# devolvera un -1
#--------------------------------------------------------------------------index        
            if len(años)==0:
                indx_año = -1
            else:
                for x in range(len(años)):
                    if años[x]==año:
                        indx_año = x
                        break
                    else:
                        indx_año = -1
#--------------------------------------------------------------------------index
# misma estuctura aplicada en B[5] pero con la lista categorias
            if len(categorias)==0:
                indx_cat = -1
            else:
                for x in range(len(categorias)):
                    if categorias[x]==categoria:
                        indx_cat = x
                        break
                    else:
                        indx_cat = -1
#--------------------------------------------------------------------------index
            for v in clasificacion_ventas_ac[indx_año][indx_cat]:
                if p[0]==v[0] and p[3]==categoria:
                    cont+=1
            if p[3]==categoria:
                l.append([p[0],año,categoria,cont])
        lc.append(l)
    conteo_ventas_ac.append(lc)
            
# Se creara una lista que contendra la ide del producto asociada a su numero de 
#busquedas utilizando un contador que cada que encuentre en elemento a contar
#en la lista de todas las busquedas contara cuantaas veces aparece
conteo_busquedas_c = []

for categoria in categorias:
    l = []
    for p in lifestore_products:
        cont=0
# lineas de codigo para encontrar posiciones consultar bloque B[5] para mas info
#--------------------------------------------------------------------------index
        if len(categorias)==0:
            indx_cat = -1
        else:
            for x in range(len(categorias)):
                if categorias[x]==categoria:
                    indx_cat = x
                    break
                else:
                    indx_cat = -1
#--------------------------------------------------------------------------index
        for b in clasificacion_busquedas_c[indx_cat]:
            if p[0]==b[0] and p[3]==categoria:
                cont+=1
        if p[3]==categoria:
            l.append([p[0],categoria,cont])
    conteo_busquedas_c.append(l)

  
# Se utiliza el bloque de ordenamiento definido y explicado en B[4]
# ordenara las compras de menor a mayor, con la sentencia de ordenamiento de B[4]
# basta con modificar los dos operadores relacionales en la estructa e invertirlos
# para cambiar el orde.
#
# Se itera utilizando como referencia la lista de años y categorias para poder
# acceder a los elementos de la lista que contiene la ventas dividadas por 
# año y categorias
for año in años:
    for categoria in categorias:
#--------------------------------------------------------------------------index         
        if len(años)==0:
            indx_año = -1
        else:
            for x in range(len(años)):
                if años[x]==año:
                    indx_año = x
                    break
                else:
                    indx_año = -1
#--------------------------------------------------------------------------index
        if len(categorias)==0:
            indx_cat = -1
        else:
            for x in range(len(categorias)):
                if categorias[x]==categoria:
                    indx_cat = x
                    break
                else:
                    indx_cat = -1
#--------------------------------------------------------------------------index
# como se mencionó en el B[4] el valor de "a" representa la posición del elemento
# dentro de la listas a ordenras.
# ejemplo
#        lista1=["pez", M, 8] lista2=["araña", H, 4]
# si colocamos a = 2 entonces las listas se ordenaran tomando unicamente este
# criterio 

#-------------------------------------------------------------------ordenamiento
        a = 3
        condicion=True
        while condicion:
            for i in range(len(conteo_ventas_ac[indx_año][indx_cat])-1):
                if conteo_ventas_ac[indx_año][indx_cat][i][a]>conteo_ventas_ac[indx_año][indx_cat][i+1][a]:
                    conteo_ventas_ac[indx_año][indx_cat][i],conteo_ventas_ac[indx_año][indx_cat][i+1] =conteo_ventas_ac[indx_año][indx_cat][i+1],conteo_ventas_ac[indx_año][indx_cat][i]
            cont=0        
            for j in range(len(conteo_ventas_ac[indx_año][indx_cat])-1):
                if conteo_ventas_ac[indx_año][indx_cat][j][a]<=conteo_ventas_ac[indx_año][indx_cat][j+1][a]:
                    cont+=1
            if cont>=len(conteo_ventas_ac[indx_año][indx_cat])-1:
                condicion=False
#-------------------------------------------------------------------ordenamiento
        
# ordenamiento de la lista de conteo de bisquedas agrupadas por categorias
# consultar el inicio del codigo para saber como funcionan las 
# "listas complementarias"
for categoria in categorias:

# se utiliza la estructura explicada en B[5]
#--------------------------------------------------------------------------index
    if len(categorias)==0:
        indx_cat = -1
    else:
        for x in range(len(categorias)):
            if categorias[x]==categoria:
                indx_cat = x
                break
            else:
                indx_cat = -1
#--------------------------------------------------------------------------index
# de menor a mayor, utilizando la estuctura mostada en B[4]

#-------------------------------------------------------------------ordenamiento
    a = 2
    condicion=True
    while condicion:
        for i in range(len(conteo_busquedas_c[indx_cat])-1):
            if conteo_busquedas_c[indx_cat][i][a]>conteo_busquedas_c[indx_cat][i+1][a]:
                conteo_busquedas_c[indx_cat][i],conteo_busquedas_c[indx_cat][i+1] = conteo_busquedas_c[indx_cat][i+1],conteo_busquedas_c[indx_cat][i]
        cont=0        
        for j in range(len(conteo_busquedas_c[indx_cat])-1):
            if conteo_busquedas_c[indx_cat][j][a]<=conteo_busquedas_c[indx_cat][j+1][a]:
                cont+=1
        if cont>=len(conteo_busquedas_c[indx_cat])-1:
            condicion=False
#-------------------------------------------------------------------ordenamiento

# ahora tenemos las ventas y busquedas ordenadas y catalogadas




# Se crea una lista que funciona como concentrado para las reseñas y devoluciones
# en este caso estaremos utilizando la siguiente estructura para guardar la
# infomación  : [id,[r,r,r,..],[d,d,d,...]] una lista cuyo primer elemento sera el id 
# del prodiucto, el segundo elemento sera una lista que contendra todas las reseñas
#asociadas a ese producto, el tercer elemento sera una lista que contendra la 
# el valor logico si esa compra asociada se dio un reembolso
# a esa estructura la llamaremos : 
# "unidad de guardado" = [id,[r,r,r,..],[d,d,d,...]] = unit
# concentrado_reseñas_devoluciones_a tendra la siguiente forma:
#
# concentrado_reseñas_devoluciones_a = ["año1",año2,...,añon]
#                           [[unit1,unit2,unit3,...],[],...,[]]

concentrado_reseñas_devoluciones_a = []
# itera por el conjunto de años y de las ventas
for año in años:
    ls=[]
    for p in lifestore_products:
        ls.append([p[0],[],[]])
        for s in lifestore_sales:
            if p[0]==s[1] and año==s[3][6:10]:
                ls[len(ls)-1][1].append(s[2])
                ls[len(ls)-1][2].append(s[4])
# pasa una situación y es que si un producto no fue comprado, no tendra las dos 
# valoraciones que estamo buscando y ese articlo su "unidad de guardad" estara
# vacia ejemplo : [ide,[],[]], para nuestro analisis necesitaremos que al menos
# este un cero, haciendo referencia que el no fue comprado.
# por eso la condición siguiente : [id,[r,r,r,..],[d,d,d,...]] si la lista en el
#indice 1 esta vacia y la del indice 2 tambien esta vacia, osea longitud cero
# agregar un cero en su interior, claro esto de ultimo de haber interado por la
# lista completa, si nos aseguramos de que en efecto el articulo no fue comprado
        if len(ls[len(ls)-1][1])==0:
            ls[len(ls)-1][1].append(0)
        
        if len(ls[len(ls)-1][2])==0:
            ls[len(ls)-1][2].append(0)
                
    concentrado_reseñas_devoluciones_a.append(ls)
    
    
# se crea concentrado que tiene los promedios de las reseñas y las devoluciones
# Las siguientes lineas de codigo tienen la finalidad de utilizar la lista creada
# anteriormenete llamada "concentrado_reseñas_devoluciones_a" y calcular la media
# tanto de las reseñas como de las devoluciones y guardarlas en una nueva lista 
# que tendra la siguiente forma y estara dividad en años:
# - - - [año1,año2,...,añon]
# - - [[id1, promedio_reseñas1, promedio_reembolsos1],[[id2, promedio_reseñas2,
# ----------------------------------promedio_reembolsos2]],["año2"],...,[año3]]

promedio_reseñas_devoluciones_a = []

for año in años:
    ls=[]
# se utilizan las siguiente lineas para encontar el indice del elemento año en 
# la lista años, puede consultar mas de la estructura en B[5]
#------------------------------------------------------------------------------ index
    if len(años)==0:
        indx_año = -1
    else:
        for x in range(len(años)):
            if años[x]==año:
                indx_año = x
                break
            else:
                indx_año = -1
#------------------------------------------------------------------------------ index
# condirendo  [id,[r,r,r,..],[d,d,d,...]] como elementos de guardado, se itera
# en la lista en el indice 1, y se suman sus elementos para posteriormente
# dividirlos entre el numero de elementos, calculando el promedio de reseñas
# para ese articulo y colocando en otra lista, lo mismo se hace para calcular
# el promedio de devoluciones de cada articulo
    for rd in concentrado_reseñas_devoluciones_a[indx_año]:
        prom_score = 0
        prom_devol = 0
        
        for j in rd[1]:
            prom_score+=j
        for k in rd[2]:
            prom_devol+=k
        
        prom_score/=len(rd[1])
        prom_devol/=len(rd[2])    
        ls.append([rd[0],prom_score,prom_devol])
    promedio_reseñas_devoluciones_a.append(ls)
# tenemos una nueva lista que contiene los promedios de reseñas y devoluciones de 
# cada articulo, categorizando estas metricas por el año en que se hizo la
# valoración y la devoluvion
    
# Ordenamiento de los productos con mayores reseñas promedio
# iteramos por los elementos de la lista años ["2020","2019","2002"]
for año in años:
# la siguiente linea se usa para obtener los indices de los años, para poder
# acceder a su respectiva información en las listas que ya estan divididas
# por años, mas imformación de esta estructura consultar B[5]
#------------------------------------------------------------------------------ index
    if len(años)==0:
        indx_año = -1
    else:
        for x in range(len(años)):
            if años[x]==año:
                indx_año = x
                break
            else:
                indx_año = -1
#------------------------------------------------------------------------------ index  

# utilizamos el bloque que nos permite ordenas los elementos de una lista
# utilizando el ordenamiento burbuja  para mas información checar B[4]
# el valro a sirve para decir en que posición tomar el valor par el 
# ordenamiento
#-------------------------------------------------------------------------ordenamiento
    a = 1
    condicion=True
    while condicion:
        for i in range(len(promedio_reseñas_devoluciones_a[indx_año])-1):
            if promedio_reseñas_devoluciones_a[indx_año][i][a]<promedio_reseñas_devoluciones_a[indx_año][i+1][a]:
                promedio_reseñas_devoluciones_a[indx_año][i],promedio_reseñas_devoluciones_a[indx_año][i+1] = promedio_reseñas_devoluciones_a[indx_año][i+1],promedio_reseñas_devoluciones_a[indx_año][i]
        cont=0        
        for j in range(len(promedio_reseñas_devoluciones_a[indx_año])-1):
            if promedio_reseñas_devoluciones_a[indx_año][j][a]>=promedio_reseñas_devoluciones_a[indx_año][j+1][a]:
                cont+=1
        if cont>=len(promedio_reseñas_devoluciones_a[indx_año])-1:
            condicion=False
#-------------------------------------------------------------------------ordenamiento            

# ahora que ya obtuvimos le promedio de las reseñas y las devoluciones, 
# y la lista esta ordenada, podremos eliminar aquellos productos que no
# se compraron ni fueron evaluados, sabremos cuales son ya que su promedio
# de reseñas sera igual a cero, obtenemos una lista que encuentre en que
# indices se encuentran dichos productos para posteriormente eliminarlos


# la siguiente lista muestra los INDICES que eliminar
indices_to_remove = []

for año in años:
    ls=[]
# lo mismo, para poder iterar por la lista necesitamos acceder los datos que estan
# organizados por años, por ende utilizamos las siguientes lineas para conocer la
# posición del elemento año un la lista años, y saber donde se encuentra su 
# información asociada
# para mas información consultar B[5]
#----------------------------------------------------------------------------- index
    if len(años)==0:
        indx_año = -1
    else:
        for x in range(len(años)):
            if años[x]==año:
                indx_año = x
                break
            else:
                indx_año = -1
#----------------------------------------------------------------------------- index
# se guarda el indice, que es la posición del elemento cuyo reseña promedio es 0
    for i in range(len(promedio_reseñas_devoluciones_a[indx_año])):
        if promedio_reseñas_devoluciones_a[indx_año][i][1]==0:
            ls.append(i)
    indices_to_remove.append(ls)
# ahora contamos con una lista con los indices de los productos que debemos eliminar
    
# iteramos por la lista que contiene los años
for año in años:
# para mas información del bloque siguiente consultar el B[5]
# la finalida es poder iterar con años y encontar posiciones, es mas intuitivo
# de esta manera
#------------------------------------------------------------------------------ index
    if len(años)==0:
        indx_año = -1
    else:
        for x in range(len(años)):
            if años[x]==año:
                indx_año = x
                break
            else:
                indx_año = -1
#------------------------------------------------------------------------------ index
# utilizamos la palabra reservada "del" que nos permite eliminar los indices
# de una lista de nuestro interes
# utilizamos la siguiente forma para colcoar los indices :
# - - - indices_to_remove[indx_año][0] nos pemite conocer desde que indice debemos
#comenzar a eliminar ":" que se podria interpretar como hasta y 
# - - - indices_to_remove[indx_año][-1]+1] que se podria entender como
# hasta el ultimo elemento mas 1, ya que las rebanadas no cuentan el ultimo
    del promedio_reseñas_devoluciones_a[indx_año][indices_to_remove[indx_año][0]:indices_to_remove[indx_año][-1]+1]


# Obteniendo listas de 10 productos con mejores reseñas y 20 con las peores
# En las siguientes lineas vamos a sacar unicamente un numero contado de 
# productos, con las mayores reseñas y con las peores
promedio_n_max_score = []
promedio_n_min_score = []
# n es un valor que al modificarle le decimos al programa cuantos elementos
# queremos extraer para guardarlos en las variables anteriores
n = 10

# iteramos por el conjunto de los años
for año in años:
    ls_max = []
    ls_min = []
# utilizamos la siguiente información para encontrar los indices asociados al 
# elemento año de la lista año, necesaria para acceder a la información de ese
# año en la lista de registro
# para mas información consultar B[5]
#------------------------------------------------------------------------------ index
    if len(años)==0:
        indx_año = -1
    else:
        for x in range(len(años)):
            if años[x]==año:
                indx_año = x
                break
            else:
                indx_año = -1
#------------------------------------------------------------------------------ index

# aqui hay una confición que quiere decir que en el caso de que la lista no cuente
# con los suficientes n-elementos solicitados, que tenga menos elementos que los n
# solicitados, entonces que use la longitud de la lista completa
    if len(promedio_reseñas_devoluciones_a[indx_año])>=n:
        for i in range(n):
            ls_max.append(promedio_reseñas_devoluciones_a[indx_año][i])
            ls_min.append(promedio_reseñas_devoluciones_a[indx_año][-(i+1)])
    else:
        for j in range(len(promedio_reseñas_devoluciones_a[indx_año])):
            ls_max.append(promedio_reseñas_devoluciones_a[indx_año][j])
            ls_min.append(promedio_reseñas_devoluciones_a[indx_año][j])
# se guardan en las variables adecuadas                     
    promedio_n_max_score.append(ls_max)
    promedio_n_min_score.append(ls_min)
    
# ahora ya contamos con dos listas quec contienen los 20 productos con
# o peores reseñas




# Se creara una lista que permitira organizar las ventas en años > meses
# siedo esta la jerarquia, para poder acceder a la informaión
# deberemos de pasarle como argumento un año y un mes en forma de indices
ventas_registro_am = []
# tendra la sigiente forma
# ventas_registro_am = [año1,año2,...,añon]
#            [[01,02,...,12],[01,02,..,12],[01,02,...,03]]
#      [[[id1,venta,01],[id2,venta,01],...],[[id1,venta,02],[...]],[[...]]]

# se utiliza un ciclo for para iterar por los elementos de la lista 
# años. y tambien uno para iterar por los elementos de la lista 
# meses.

# la variable lm : contendra una lista vacia la cual sera unicamente
# utilizada en este bloque, ya que sera guardada en una listqa de
# de mayor jerarquia, "lm" va a guardar las listas que cada una
# representa un año diferente

# lavariable l : tiene un objetivo similar a "lm", con la diferencia
# de que esta tendra en su interior, las lista de cada compra hecha,
# en ese mes y ese año, y se guardara en la lista lm, donde ahim cada
# elemento represetantara un mes diferente.
for año in años:
    lm=[]
    for mes in meses:
        l=[]
        for s in lifestore_sales:
# para que el elemento pueda guardarse en la lista l, debe de cumplir
# las condiciones de que el año de la venta y el mes deben de coincidir
# asi como que solo se contaran ventas que no se hayan reembolsado
            if s[3][6:10]==año and  s[3][3:5]==mes and s[4]==0:
                l.append([s[1],año,mes,s[4]])
        lm.append(l)
    ventas_registro_am.append(lm)
    
# En las siguientes lineas nos tomamtes a la tarea de tomar la lista 
# anterioriormente creada, para adicionar al registro de las ventas, el
#precio del articulos

# se itera sobre el conjunto de los años, y de los meses para poder 
#acceder a ventas_registro_am
for año in años:
    for mes in meses:
        
# las lineas siguiente se utilizan para localizar el indice que
# año como elemento ocupa en la lista años, esto con la intención
# de iterar sobre ventas_registro_am
# para mas información consultar el B[5]
#--------------------------------------------------------------------------index
        if len(años)==0:
            indx_año = -1
        else:
            for x in range(len(años)):
                if años[x]==año:
                    indx_año = x
                    break
                else:
                    indx_año = -1
#--------------------------------------------------------------------------index
# aqui estamos utilizando el bloque es explicado en B[5]
# para poder saber el indice que ocupa la variable mes en la lista meses
        if len(meses)==0:
            indx_mes = -1
        else:
            for x in range(len(meses)):
                if meses[x]==mes:
                    indx_mes = x
                    break
                else:
                    indx_mes = -1
#--------------------------------------------------------------------------index
# Se itera sobre el registro de las ventas ordenados por año
# y mes, para poder tomar de referencia el id, y saber que
# precio adicionar.
        for v in ventas_registro_am[indx_año][indx_mes]:
            for p in lifestore_products:
                if p[0]==v[0]:
                    v.append(p[2])
                    



# Las siguientes lineas tienen como objetivo el calcular las ventas
# y los ingresos promedio mensuales, clasificados en cada año
# y guardarlos en una nueva lista
#
# ventas_ingresos_promedio_mesuales_a = [año1,año2,...,año3]
#         año1 = [[año1,ip,vp],[año1,ip,vp],...,[]]    

ventas_ingresos_promedio_mensuales_a = []

# se itera sobre el conjunto de años
for año in años:
    ip=0
    vp=0
    for mes in meses:
# lineas de codigo para consultar el indice de que ocupa un elemento
# en una colección, mas información consultar B[5]
#--------------------------------------------------------------------------index
        if len(años)==0:
            indx_año = -1
        else:
            for x in range(len(años)):
                if años[x]==año:
                    indx_año = x
                    break
                else:
                    indx_año = -1
#--------------------------------------------------------------------------index
# lineas de codigo para consultar el indice de que ocupa un elemento
# en una colección, mas información consultar B[5]
        if len(meses)==0:
            indx_mes = -1
        else:
            for x in range(len(meses)):
                if meses[x]==mes:
                    indx_mes = x
                    break
                else:
                    indx_mes = -1
#--------------------------------------------------------------------------index
# el ciclo for itera sobre los elementos de la lista 
# ventas_registro_am, y mediante una variable que guarda un valor
# despues le suma otro, llamada ip llevara la suma de los ingresos
# asociado a la compra de cada articulo para cada mes
# este valor se le divide entre 12, ya que asi sabremos que las
# ganancias de un año entre 12 seran las ganancias promedio por
# por mes lo mismo hacemos con las ventas, que en este caso se
# obtienen utilizando la función "len()" para saber los elementos
# (ventas) en cada colección
        for v in ventas_registro_am[indx_año][indx_mes]:
            ip+=v[4]
        vp+=len(ventas_registro_am[indx_año][indx_mes])
    ip/=12
    vp/=12
    ventas_ingresos_promedio_mensuales_a.append([año,ip,vp])
    

# las siguientes lineas de codigo tienen la finalidad de obtener
# un concentrado de las ventas e ingresos totales realizados
# cada mes, en cada año
#
# ventas_ingresos_am =    [año1  ,año2 ,..., añon]
#         [ [ [01],[02],...,[12] ],[ [01],[02],...,[12] ],[[01],[02],...,[12] ] ]
#             [01]=[id, ingresos_totales, ventas_totales]

ventas_ingresos_am = []

# se itera sobre el conjunto de años y sobre el conjunto de meses
# para poder acceder a al concentrado de ingresos y ventas 
# ordenados por año y mes : ventas_registro_am
# asi obtener las ventas totales por mes y no promedio
for año in años:
    lm=[]
    for mes in meses:
# se utilizan las lineas siguientes para poder encontrar el indice
# que ocupa el elemento año en la lista años
# para mas información consultar B[5]
#--------------------------------------------------------------------------index
        if len(años)==0:
            indx_año = -1
        else:
            for x in range(len(años)):
                if años[x]==año:
                    indx_año = x
                    break
                else:
                    indx_año = -1
#--------------------------------------------------------------------------index
# se utilizan las lineas siguientes para poder encontrar los indices
# necesarios para acceder a la información, para mas información
# consultar B[5]
        if len(meses)==0:
            indx_mes = -1
        else:
            for x in range(len(meses)):
                if meses[x]==mes:
                    indx_mes = x
                    break
                else:
                    indx_mes = -1
#--------------------------------------------------------------------------index
# it es un contador, para llevar el sumario de los ingresos
        it=0
# se itera sobre las ventas del registros 
        for i in ventas_registro_am[indx_año][indx_mes]:
            it+=i[4]
# una vez se han sumado todas las ganancias del mes
# se guardan en una lista lm, la cual contendra estas
# metricas , para despues de juntarlas colocar la nueva lista
# en ventas_ingreso, cada elementos correspondera a un año
        vt=len(ventas_registro_am[indx_año][indx_mes])
        lm.append([año,mes,it,vt])
    ventas_ingresos_am.append(lm)
    

# se crea un nuevo consentrado el cual clasificara unicamente
# las ventas por año en que se hicieron
total_ingresos_ventas_a = []

# total_ingresos_ventas_a = [año1 , año2 , ... , añon]
# [[año1,total_ganancias,total_ventas],[año2,total_ganancias,total_ventas],[...]]

# se itera con los elementos de la lista de años y de meses
for año in años:
    pi_año=0
    pv_año=0
    for mes in meses:
# las siguientes lineas son para poder encontrar el indice que
# ocupa el elemento año en la lista años
# para mas información consultar B[5]
#--------------------------------------------------------------------------index
        if len(años)==0:
            indx_año = -1
        else:
            for x in range(len(años)):
                if años[x]==año:
                    indx_año = x
                    break
                else:
                    indx_año = -1
#--------------------------------------------------------------------------index
# las siguientes lineas son para poder encontrar el indice que
# ocupa el elemento mes en la lista meses
# para mas información consultar B[5]
        if len(meses)==0:
            indx_mes = -1
        else:
            for x in range(len(meses)):
                if meses[x]==mes:
                    indx_mes = x
                    break
                else:
                    indx_mes = -1
#--------------------------------------------------------------------------index
# se itera sobre la lista que lleva el registro de ventas dividida o
# clasificada en años y meses
        for v in ventas_registro_am[indx_año][indx_mes]:
# pi_año solo se utiliza para sumar y guardar la cantidad de las
# ganancias y pv_año suma y mantiene las ventas
            pi_año+=v[4]
        pv_año+=len(ventas_registro_am[indx_año][indx_mes])
# lo guardan en la lista total_ingresos_ventas_a
    total_ingresos_ventas_a.append([año,pi_año,pv_año])
# ahora contamos con una lista que nos permite conocer cuantos
# ingresos se obtuvieron en un año en especifico asi como
# sus ventas totales
    
    
# Creamos una nueva lista, ya que a nuestro criterio sera
# necesaria para analisis posterior de la información 
# la cual nos permite registrar las ventas obtenidas por
# la tienda pero divididas en años>categorias>meses
ventas_registro_acm = []

# se itera sobre los elemenos de la lista años, categorias y
#meses
for año in años:
    lc=[]
    for categoria in categorias:
        lm=[]
        for mes in meses:
# en las siguientes lineas obtendremos los indices asociadas
# a los elementos dentro de sus respectivas listas
# para poder crear dichas claficaciones
#--------------------------------------------------------------------------index
            if len(años)==0:
                indx_año = -1
            else:
                for x in range(len(años)):
                    if años[x]==año:
                        indx_año = x
                        break
                    else:
                        indx_año = -1
#--------------------------------------------------------------------------index
            if len(categorias)==0:
                indx_cat = -1
            else:
                for x in range(len(categorias)):
                    if categorias[x]==categoria:
                        indx_cat = x
                        break
                    else:
                        indx_mes = -1
#--------------------------------------------------------------------------index
            if len(meses)==0:
                indx_mes = -1
            else:
                for x in range(len(meses)):
                    if meses[x]==mes:
                        indx_mes = x
                        break
                    else:
                        indx_mes = -1
# para mas información consultar B[5]
#--------------------------------------------------------index
# ls es una lista vacia al inicio pero que contendra listas
# donde cada lista tiene la información de cada venta ya
# filtrada
            l=[]
# se itera sobre los elementos de la lista de las ventas
            for s in lifestore_sales:
# se itera sobre los elementos de la lista de los productos
                for p in lifestore_products:
# si se cunmple la condicion que de ambos elementos coinciden en id
# y el la lista de ventas es del año actual de la iteración for
# sobre años, ademas de que el id esa sociado a la categoria presente
# del ciclo for sobre categorias, lo mismo pasa con los meses y que 
# las ventan no tengan rembolsos.
# si se cumplen las condiciones el elemento forma parte de la
# clasificación
                    if s[1]==p[0] and s[3][6:10]==año and p[3]==categoria and s[3][3:5]==mes and s[4]==0:
                        l.append([s[1],año,categoria,mes,s[4],p[2]])
# lm comienza como una lista vacia pero guardara las listas que contienen
# las ventas de ese mes
            lm.append(l)
# lc comienza como una lista vacia pero guardara las listas que contienen
# las ventas del mes actual del ciclo for sobre meses, del año actual del
# ciclo for sobre años
        lc.append(lm)
# la lista que contiene las ventas, del mes y la categoria correctas del
# ciclo for presente
    ventas_registro_acm.append(lc)

    
# a continuacion crearmos una lista llamada ventas_ingresos_acm
# la cual tendra los ingresos totales y las ventas totales de
# cada mes para cada año

ventas_ingresos_acm = []
# se itera sobre los elementos de años, categorias y meses
for año in años:
    lc=[]
    for categoria in categorias:
        lm=[]
        for mes in meses:
# necesario para poder acceder a la lista ventas_registro_acm
# para mas información consultar B[5]
#--------------------------------------------------------------------------index
            if len(años)==0:
                indx_año = -1
            else:
                for x in range(len(años)):
                    if años[x]==año:
                        indx_año = x
                        break
                    else:
                        indx_año = -1
#--------------------------------------------------------------------------index 
            if len(categorias)==0:
                indx_cat = -1
            else:
                for x in range(len(categorias)):
                    if categorias[x]==categoria:
                        indx_cat = x
                        break
                    else:
                        indx_mes = -1
#--------------------------------------------------------------------------index
            if len(meses)==0:
                indx_mes = -1
            else:
                for x in range(len(meses)):
                    if meses[x]==mes:
                        indx_mes = x
                        break
                    else:
                        indx_mes = -1
#--------------------------------------------------------------------------index
# it es un contador que los permitira sumar las ingresos de
# las compras hechas ese año, de esa categoria de producto
# en un mes especifico
            it=0
            for v in ventas_registro_acm[indx_año][indx_cat][indx_mes]:
# se suman las ganancas en it que es : ingresos totales
                it+=v[5]
# lm comienza como una lista vacia pero se usa para guar la
# informacion de las ganancias, donde cada elemento corresponde 
# a un mes diferente
            lm.append([año,categoria,mes,it])
# lc es una lista que permite guardar la lista lm, en lc donde
# cada elemento representa a cada cateria
        lc.append(lm)
# finalamente lc se guarda en ventas_ingresos_acm donde
# cada elemento representa a la información de cada
#año
    ventas_ingresos_acm.append(lc)
# ahora tenemos una lista que contiene las ventas totales de cada mes
# para cada categoria de cada año, con el fin de contar con estos
# datos para el analisis posterior




# Estas variables fueron definidas para darle una interfaz mas
# amigable, para poder nevegar por la información
Inicio = """
Interfaz : teclear el numero de la entrada deseada
1: Iniciar sesión  2:Crear usuario
----------------------------------------------------
#                                #                 #
#1) Ingresar Usuario/Contraseña  #2) Crear Usuario #
#                                #                 #
----------------------------------------------------
"""
Crear1 = """
---------------------------------------------------
# 1) Ingresar Nombre completo:                  [*]
---------------------------------------------------
# 2) Ocupación dentro de la institución:        [ ]
---------------------------------------------------
# 3) IDE de empleado:                           [ ]
---------------------------------------------------
# 4) Correo electronico:                        [ ]
---------------------------------------------------
# 5) Ingresar contraseñar de 6-15 caracteres    [ ]
---------------------------------------------------
# 6) Repetir la contraseña de 6 a 15 caracteres [ ]
---------------------------------------------------
"""
Crear2 = """
---------------------------------------------------
# 1) Ingresar Nombre completo:                  [ ]
---------------------------------------------------
# 2) Ocupación dentro de la institución:        [*]
---------------------------------------------------
# 3) IDE de empleado:                           [ ]
---------------------------------------------------
# 4) Correo electronico:                        [ ]
---------------------------------------------------
# 5) Ingresar contraseñar de 6-15 caracteres    [ ]
---------------------------------------------------
# 6) Repetir la contraseña de 6 a 15 caracteres [ ]
---------------------------------------------------
"""
Crear3 = """
---------------------------------------------------
# 1) Ingresar Nombre completo:                  [ ]
---------------------------------------------------
# 2) Ocupación dentro de la institución:        [ ]
---------------------------------------------------
# 3) IDE de empleado:                           [*]
---------------------------------------------------
# 4) Correo electronico:                        [ ]
---------------------------------------------------
# 5) Ingresar contraseñar de 6-15 caracteres    [ ]
---------------------------------------------------
# 6) Repetir la contraseña de 6 a 15 caracteres [ ]
---------------------------------------------------
"""
Crear4 = """
---------------------------------------------------
# 1) Ingresar Nombre completo:                  [ ]
---------------------------------------------------
# 2) Ocupación dentro de la institución:        [ ]
---------------------------------------------------
# 3) IDE de empleado:                           [ ]
---------------------------------------------------
# 4) Correo electronico:                        [*]
---------------------------------------------------
# 5) Ingresar contraseñar de 6-15 caracteres    [ ]
---------------------------------------------------
# 6) Repetir la contraseña de 6 a 15 caracteres [ ]
---------------------------------------------------
"""
Crear5 = """
---------------------------------------------------
# 1) Ingresar Nombre completo:                  [ ]
---------------------------------------------------
# 2) Ocupación dentro de la institución:        [ ]
---------------------------------------------------
# 3) IDE de empleado:                           [ ]
---------------------------------------------------
# 4) Correo electronico:                        [ ]
---------------------------------------------------
# 5) Ingresar contraseñar de 6-15 caracteres    [*]
---------------------------------------------------
# 6) Repetir la contraseña de 6 a 15 caracteres [ ]
---------------------------------------------------
"""
Crear6 = """
---------------------------------------------------
# 1) Ingresar Nombre completo:                  [ ]
---------------------------------------------------
# 2) Ocupación dentro de la institución:        [ ]
---------------------------------------------------
# 3) IDE de empleado:                           [ ]
---------------------------------------------------
# 4) Correo electronico:                        [ ]
---------------------------------------------------
# 5) Ingresar contraseñar de 6-15 caracteres    [ ]
---------------------------------------------------
# 6) Repetir la contraseña de 6 a 15 caracteres [*]
---------------------------------------------------
"""
Ingresar1 = """
Si se registró, su IDE es el usuario para ingresar
---------------------------------------------------
# - Ingresar Usuario-Administrador:             [*]
---------------------------------------------------
# - Ingrese Contraseña:                         [ ]
---------------------------------------------------
"""
Ingresar2 = """
Si se registró, su IDE es el usuario para ingresar
---------------------------------------------------
# - Ingresar Usuario-Administrador:             [ ]
---------------------------------------------------
# - Ingrese Contraseña:                         [*]
---------------------------------------------------
"""

Lobby = """

Interfaz : teclear el numero de la entrada deseada
para consultar cada apartado (1,2,3,4,5)
---------------------------------------------------
#                                                 |
# 1)Productos mas vendidos y rezagados            |
#                                                 |
--------------------------------------------------|
#                                                 |
# 2)Productos por reseñas en el servicio          |
#                                                 |
--------------------------------------------------|
#                                                 |
# 3)Total de ingresos y ventas promedio           |
#                                                 |
--------------------------------------------------|
#                                                 |
# 4)Reporte Completo                              |
#                                                 |
--------------------------------------------------|
#                                                 |
# 5)Salir                                         |
#                                                 |
---------------------------------------------------
"""
Confirmacion = """
---------------------------------------------------
#                #                                #
#1) Confirmar    #  2) Salir y volver a intentar  #
#                #                                #
---------------------------------------------------

"""
# La lista vacia llamda Info : es para almacenar los datos
# de la persona que se ha dado de alta al sistema
# la integridad de la información es la prioridad
# por lo tanto debemos de registrar quien tiene acceso

# Usuarios : es una lista que contienen los usuarios 
# predefinidos para logearse con el programa

# Contraseñas : es una lista que contiene la 
# contraseña predefinida para logearse

# Condicion_loby : es una variable que solo puede
# tomar 2 valores [0 ó 1], 0 para que empecemos
# desde la pagina del login, 1 para saltarnos el login
# y mantener la sesión sin cerrar

Info = []
Usuarios = ["Emtech2021"]
Contraseñas = ["BecasEmtech2021"]
condicion_lobby = 0

# todo el codigo de la intefaz se desarrolla en un ciclo
# while, para asgurarnos siempre mantenernos en la interfaz

while True:
# aqui se manda a consola la escena del login, para poder
# inicar sesión o crear otro usuario
    print(Inicio)
    
# la condicion_lobby se aplica, si es igual a 0 ejecutara
# el codigo, si condicion_lobby == 1 se saltara varias
# escenas pera que no te solicite el usuario y
# contraseñas de nuevo
    if condicion_lobby==0:
# pide al usuario que ingrese una entrada [1 o 2] para
# guardarlo en la variable menu_p1
        menu_p1 = int(input("1-2"))

# Se evaluar menu_p1 si es igual a 1 pasamos al apartado
# de logearse con el usuario predeterminado, en el caso
# de no cumplirse la condición pasaremos al apartado
# para registrar un nuevo usuario
    if menu_p1 == 1:

# de nuevo se evalua la condicion_lobby de ser igual a 0
# imprimira en pantalla la escena de apoyo para inciar 
# sesion y pedira al usuario que introduzca una entrada
# para guardarle en usuario, que sera el usuario que
# intenta iniciar sesion
        if condicion_lobby==0:
            print(Ingresar1)
            usuario = input("Introducir usuario: ")

# Se evaluar una condición donde se busca si el elemento
# usuario existe en la lista Usuarios, en el caso de haber
# coindicencia se imprime la pantalla que te ayuda y
# solicita la contraseña

# en el caso de no cumplirse la condición del if, se 
# imprimira en pantalla un mensaje que el usuario es
# incorrecto y se termina la iteración
        if usuario in Usuarios:
            if condicion_lobby==0:
                print(Ingresar2)
# pide al usuario que escriba la contraseña y la guarda en
# una variable
                contraseña = input("Introducir contraseña: ")

# Si la contraseña introducida existe en la lista que contiene
# a las contraseñas validas entonces permite continuar
# de lo contrario imprime en pantalla un aviso informando
# que las contraseñas no coinciden

# imprimire la variable lobby que contiene un apoyo grafico que
# ayuda a la navegación
# pide al usuario una entrada entre [1-5]
            if contraseña in Contraseñas:
                print(Lobby)
                consulta = int(input("Ingrese 1-5"))
                print(" ")
# si la entrada es igual a 1 se ejecuta el bloque de codigo
                if consulta==1:
#----------------------------------------------------------------#
#----------------------------------------------------------------#
# hay un detalle con la codificón y es que si no se tiene cuidado
# podemos tener lineas muy largas de codigo, en este contexto
# s permite ahorrarnos 2 espacios de caracteres
                    s = "|"
# separador visual, se usa la muitiplicación de caracter y numero
# entero, y se presemta un anuncio de lo que vendra 
                    print(15*" "+22*"> "+22*"< ")
                    print("                     A continuación se presentan los 15 productos con mayores ventas registradas")
                    print(" ")
# permite colocar barras horizontales, dichos calculo ya se hicieron
# de cuantas barras son lo ideal
                    print(6*"-"+s+8*"-"+s+14*"-"+s+17*"-"+s+70*"-")
# se crearon estas variables para la parte de la cabecera ya es
# espaciados y en formato
                    ordn = "|Orden|"
                    ide = 2*" "+"Ide"+3*" "+"|"
                    nv = 4*" "+"ventas"+4*" "+"|"
                    cat = 4*" "+"Categoria"+4*" "+"|"
                    no = 6*" "+"Nombre"
                    print(ordn+ide+nv+cat+no)
                    print(6*"-"+s+8*"-"+s+14*"-"+s+17*"-"+s+70*"-")
# contador se usa para saber cuantas entradas se han mostrado
                    cont=1
# se itera sonbre la colección "conteio_mejores_ventas"
# tambien se itera sobre el conjunto de productos para usar
# sus caracteristicas, so ambos id concuerdan entonces
# se imprime la información relevate a ese articulo
                    for v in conteo_mejores_ventas:
                        for p in lifestore_products:
                            if p[0]==v[0]:
                                c = str(cont)
                                sp1 = str(v[0])
                                sp2 = str(v[1])
                                sp3 = p[3]
                                sp4 = p[1]
                                
# dentro del codigo se implementaron algo que denominé
# "espacios dinamicos" y es hacer que dos valores de diferentes
# longitudes no arruien el formato espacio ya que es adaptativa
# formula : string + (cantidad maxima - longitud(str))*" "
# mantendra todo perfectamente en formato
                                c = 1*" "+"#"+c+(2-len(c))*" "+2*" "
                                sp1 = 3*" "+sp1+(2-len(sp1))*" "+3*" "
                                sp2 = 5*" "+sp2+(3-len(sp2))*" "+6*" "
                                
                                sp3 = sp3+(17-len(sp3))*" "
        
# se imprime el producto uno por uno, hasta abarcar la lista de conteo                        
                                print(c+s+sp1+s+sp2+s+sp3+s+sp4)
                                print(" ")
                                cont+=1
# visualmente otro separador
# se imprime lo que se va a mostrar
                    print(15*" "+22*"> "+22*"< ")
                    print("                     A continucación se presentan los 20 productos con mayores busquedas registradas")
                    print(" ")
# emcabezado de la tabla respectivamente espaciado
                    ordn = "|Orden|"
                    ide = "  Ide   |"
                    nb = "No. busquedas |"
                    cat = 4*" "+"Categoria"+4*" "+"|"
                    no = "      Nombre"
# se concatena todo junto, al igual que los delimatores
                    print(ordn+ide+nb+cat+no)
                    print(6*"-"+s+8*"-"+s+14*"-"+s+17*"-"+s+70*"-")
                    cont=1
# itera sobre el conjunto que tiene las mejores busquedas y 
# de los de los productos.

# Si las id coinciden entonces se procede a mostrar la
# información del producto, apoyandose la lista de 
# productos

# c,sp1,sp2,sp3,sp4 permite tratar los datos a mostrar
# y guardarlo como cadenas para poder contatenarlos y
# hacer uso de los espacios dinamicos
                    for b in conteo_mejores_busquedas:
                        for p in lifestore_products:
                            if p[0]==b[0]:
                                c = str(cont)
                                sp1 = str(b[0])
                                sp2 = str(b[1])
                                sp3 = p[3]
                                sp4 = p[1]
                                
                                c = 1*" "+"#"+c+(2-len(c))*" "+2*" "
                                sp1 = 3*" "+sp1+(2-len(sp1))*" "+3*" "
                                sp2 = 5*" "+sp2+(3-len(sp2))*" "+6*" "
                                sp3 = sp3+(17-len(sp3))*" "
# se concatena toda la salida y la muestra por pantalla
                                print(c+s+sp1+s+sp2+s+sp3+s+sp4)
                                print(" ")
                                cont+=1
                                
# se itera sobre los años y las categorias para poder acceder
# a la lista llamada conteo_ventas_ac
                    for año in años:
                        for categoria in categorias:
                            print(" ")
                            print(60*"__")
                            print("                           Listas de productos por categorias con menores ventas")
                            print("Se presenta una lista los productos menos vendidos del año: "+año+" en la categoria de: "+categoria)
                            print(60*"__")
# permite colocar un emcabezado de forma bonita y ordenada
# y se imprime la salida ya ordenada
                            print(7*"-"+s+5*"-"+s+11*"-"+s+5*"-"+s+19*"-"+s+70*"-")
                            ordn = 1*" "+"Orden"+1*" "+"|"
                            ide = 1*" "+"Ide"+1*" "+"|"
                            nv = 3*" "+"ventas"+2*" "+"|"
                            añ = 1*" "+"año"+1*" "+"|"
                            ca = 5*" "+"Categoria"+5*" "+"|"
                            no = 6*" "+"Nombre"
                            print(ordn+ide+nv+añ+ca+no)
                            print(7*"-"+s+5*"-"+s+11*"-"+s+5*"-"+s+19*"-"+s+70*"-")
                            
# las siguientes lineas tienen la finalidad de encontrar en que indice se
# encuentra un elemento en una lista, con la finalidad de iterar en los
# datos asociados a esa lista. Para mas información consultar B[5]
#---------------------------------------------------------------index        
                            if len(años)==0:
                                indx_año=-1
                            else:
                                for x in range(len(años)):
                                    if años[x]==año:
                                        indx_año = x
                                        break
                                    else:
                                        indx_año=-1

                            if len(categorias)==0:
                                indx_cat=-1
                            else:
                                for x in range(len(categorias)):
                                    if categorias[x]==categoria:
                                        indx_cat = x
                                        break
                                    else:
                                        indx_cat =-1
#---------------------------------------------------------------index
# "cont" es una variable que nos ayuda a numerar en que orden van saliendo
# las salidas 
#se itera por los datos de la lista que contienen el numero de ventas
# cuyo orden en el que esta dispueso los datos es: [id,año,categoria,venta]
#
# las variables, c,sp1,sp2,sp3,sp4 se usan para guardar en forma de strings
# los datos que se mostraran en consola con la finalidad de no hacer muy 
# largas las lineas de codigo
                            cont=1
                            for v in conteo_ventas_ac[indx_año][indx_cat][:5]:
                                for p in lifestore_products:
                                    if v[0]==p[0]:
                                        c = str(cont)
                                        sp1 = str(v[0]) #ide
                                        sp2 = v[1] #año
                                        sp3 = v[2] #categoria
                                        sp4 = str(v[3]) #ventas
                                        sp5 = p[1] #nombre
                                
                                        c = 2*" "+"#"+c+" "+2*" "
                                        sp1 = 2*" "+sp1+(2-len(sp1))*" "+1*" "
                                        sp3 = 1*" "+sp3+(17-len(sp3))*" "+1*" "
                                        sp4 = 4*" "+sp4+(2-len(sp4))*" "+5*" "
                                        sp2 = sp2+1*" "
                                        
                                        print(c+s+sp1+s+sp4+s+sp2+s+sp3+s+sp5)
                                        print(" ")
                                        cont+=1

# pasamos al segundo enuncia que nos pide mostrar los productos con menos ventas
# y menos busquedas por categoria
# iteramos por los elementos de la lista categoria
# y se crean las variables que contendran el emcabezado de la tabla, para
# despues contantenarse y mostrarse en consola de una menera estilizada
                    for categoria in categorias:
                        print(" ")
                        print(60*"__")
                        print("                           Listas de productos por categorias con menores busquedas")
                        print("Se presenta una lista de los productoscon menos busquedas en la categoria de: "+categoria)
                        print(60*"__")
                        ordn = 1*" "+"Orden"+1*" "+"|"
                        ide = 1*" "+"Id."+1*" "+"|"
                        nb = 1*" "+"Busqueda"+1*" "+"|"
                        ca = 5*" "+"Categoria"+5*" "+"|"
                        no = 6*" "+"Nombre"
                        print(ordn+ide+nb+ca+no)
                        print(7*"-"+s+5*"-"+s+10*"-"+s+19*"-"+s+70*"-")
# bloque para consultar el indice de un elemento en una lista
# para mas información consultar el apartado B[5]
#--------------------------------------------------------index                        
                        if len(categorias)==0:
                            indx_c = -1
                        else:
                            for x in range(len(categorias)):
                                if categorias[x]==categoria:
                                    indx_c = x
                                    break
                            else:
                                indx_c = -1
#--------------------------------------------------------index
# "cont" es una variable que nos ayuda a numerar en que orden van saliendo
# las salidas 
#se itera por los datos de la lista que contienen el numero de busquedas
# cuyo orden en el que esta dispueso los datos es: [id,categoria,n_busqueda]
#
# las variables, c,sp1,sp2,sp3,sp4 se usan para guardar en forma de strings
# los datos que se mostraran en consola con la finalidad de no hacer muy 
# largas las lineas de codigo
                        cont=1
                        for b in conteo_busquedas_c[indx_c][:20]:      #[id, cat, nb]
                            for p in lifestore_products:
                                if b[0]==p[0]:
                            
                                    c = str(cont) # orden
                                    sp1 = str(b[0]) # id
                                    sp2 = b[1] # categoria
                                    sp3 = str(b[2]) #numero busquedas
                                    sp4 = p[1] #nombre
                                    
                                    c = 2*" "+"#"+c+(2-len(c))*" "+2*" "
                                    sp1 = 2*" "+sp1+(2-len(sp1))*" "+1*" "
                                    sp2 = 1*" "+sp2+(17-len(sp2))*" "+1*" "
                                    sp3 = 4*" "+sp3+(3-len(sp3))*" "+3*" "
                                    
                                    print(c+s+sp1+s+sp3+s+sp2+s+sp4)
                                    print(" ")
                                    cont+=1
# aqui se muestra por primera vez  la variable "condicion_lobby"
# el codigo le pregunta al usuario si quiere volver al lobby o 
# cerrar sesión, y guarda un estado logico para esta condición
# en el caso de introducir un 0 estaremos diciendo al programa que
# nos solicite las contraseñas de nuevo
                    print(" ")
                    condicion_lobby=int(input("Para voler al lobby teclea '1', para cerrar sesión teclear '0' "))
                    
#------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------#
# La opción dos del menu, la cual nos permite visualizar lo 
# requerido en el apartado 2 del proyecto
# si la entrada consulta es igual a 2 se ejecuta el codigo siguiente
#
# En esta primera parte preparmos las variables que nos pemtiran 
# construir el encabezado de una menra estilizada, y visulmente
# mas atractiva
# las variables ordn,ide,rp,ca,no permiten no hacer tan ancho
# el codigo y que este pueda entrar en la hoja del reporte
                elif consulta==2:
                    s = "|"
                    print(60*"# ")
                    print(" ")
                    print("Se mostrara una lista de los 20 articulos con mejores reseñas considerando devoluciones")
                    print(" ")
                    print(60*"# ")
                    for año in años:
                        print(" ")
                        print(60*"__")
                        print("                       Listas de 10 productos con mejores reseñas considerando devoluciones")
                        print("              Se presenta una lista de los 10 productos con mayores reseñas en los años: "+año)
                        print(60*"__")
                        ordn = " Orden |"
                        ide = " Ide |"
                        rp = " reseña promedio  |"
                        dp = "Devolucion promedio|"
                        ca = "    Categoria    |"
                        no = "      Nombre"
                        print(ordn+ide+rp+dp+ca+no)
                        print(7*"-"+s+5*"-"+s+18*"-"+s+19*"-"+s+17*"-"+s+40*"-")
# se hace uso uso del bloque que permite encontrar el indice de un
# elemento en una lista, para mas informacion consultar B[5]
#---------------------------------------------------------------index        
                        if len(años)==0:
                            indx_año=-1
                        else:
                            for x in range(len(años)):
                                if años[x]==año:
                                    indx_año = x
                                    break
                                else:
                                    indx_año=-1
#---------------------------------------------------------------index
# "cont" es una variable que nos ayuda a numerar en que orden van saliendo
# las salidas 
# se itera por los datos de la lista que contienen las mejores reseñas
# cuyo orden en el que esta dispueso los datos es: [id,reseña promedio,devoluciones p]
#
# las variables, c,sp1,sp2,sp3,sp4,sp5 se usan para guardar en forma de strings
# los datos que se mostraran en consola con la finalidad de no hacer muy 
# largas las lineas de codigo
                        cont=1
                        for r in promedio_n_max_score[indx_año]:
                            for p in lifestore_products:
                                if r[0]==p[0]:
                                    c = str(cont)
                                    sp1 = str(r[0])
                                    sp2 = str(r[1])
                                    sp3 = str(r[2])
                                    sp4 = p[1]
                                    sp5 = p[3]
                                    
                                    c = 2*" "+"#"+c+(2-len(c))*" "+2*" "
                                    sp1 = 2*" "+sp1+(2-len(sp1))*" "+1*" "
                                    sp2 = sp2+(18-len(sp2))*" "
                                    sp3 = sp3+(18-len(sp3))*" "+1*" "
                                    sp5 = sp5+(17-len(sp5))*" "
                                    
                                    print(c+s+sp1+s+sp2+s+sp3+s+sp5+s+sp4)
                                    cont+=1
                                    print(" ")
                    
# pasamos a mostrar los 20 elementos con peores reseñas
# en esta parte colcoamos las variables y mostramos 
# una interfaz estilizada para el encabezado
# las variables, ord, ide, rp, dp,ca,no, se usan para
# guardar los encabezados, para despues contatenarlos e imprimirlos
                    print(" ")
                    print(60*"# ")
                    print(" ")
                    print("Se mostrara una lista de los 10 articulos con las peores reseñas considerando devoluciones")
                    print(" ")
                    print(60*"# ")
                    for año in años:
                        print(" ")
                        print(60*"__")
                        print("                     Listas de 10 productos con las peores reseñas considerando devoluciones")
                        print("             Se presenta una lista de los 10 productos con las peores reseñas en los años: "+año)
                        print(60*"__")
                        ordn = " Orden |"
                        ide = " Ide |"
                        rp = " reseña promedio  |"
                        dp = "Devolucion promedio|"
                        ca = "    Categoria    |"
                        no = "      Nombre"
                        print(ordn+ide+rp+dp+ca+no)
                        print(7*"-"+s+5*"-"+s+18*"-"+s+19*"-"+s+17*"-"+s+40*"-")
# hacemos uso del bloque que nos permmite ocnsultar el indice de un elemento
# en una lista, para mas información conultar B[5]
#---------------------------------------------------------------index        
                        if len(años)==0:
                            indx_año=-1
                        else:
                            for x in range(len(años)):
                                if años[x]==año:
                                    indx_año = x
                                    break
                                else:
                                    indx_año=-1
#---------------------------------------------------------------index
# "cont" es una variable que nos ayuda a numerar en que orden van saliendo
# las salidas 
# se itera por los datos de la lista que contienen los productos con las preores
#reseñas
# cuyo orden en el que esta dispueso los datos es: [id,reseña_promed,devoluciones_p]
#
# las variables, c,sp1,sp2,sp3,sp4 se usan para guardar en forma de strings
# los datos que se mostraran en consola con la finalidad de no hacer muy 
# largas las lineas de codigo
                        cont=1
                        for r in promedio_n_min_score[indx_año]:
                            for p in lifestore_products:
                                if r[0]==p[0]:
                                
                                    c = str(cont)
                                    sp1 = str(r[0])
                                    sp2 = str(r[1])
                                    sp3 = str(r[2])
                                    sp4 = p[1]
                                    sp5 = p[3]
                                    
                                    c = 2*" "+"#"+c+(2-len(c))*" "+2*" "
                                    sp1 = 2*" "+sp1+(2-len(sp1))*" "+1*" "
                                    sp2 = sp2+(18-len(sp2))*" "
                                    sp3 = sp3+(18-len(sp3))*" "+1*" "
                                    sp5 = sp5+(17-len(sp5))*" "
                                    
                                    print(c+s+sp1+s+sp2+s+sp3+s+sp5+s+sp4)
                                    cont+=1
                                    print(" ")
# aqui se termina lo solicitado en el apartado 2, y solicitamos al
# usuario introduzca 1 para continuar en la sesion y 0 para salir
# esto se guarda en la variable condicion_lobby
                    print(" ")
                    condicion_lobby=int(input("Para voler al lobby teclea '1', para cerrar sesión teclear '0' "))
#------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------#             

# acabamos de empezar las lineas de nos ayudara a presentar la información
# solicitada en el apartado 3
# si la variable consulta es igual a 3 se ejecutara el codigo siguiente.
#
# primero se crearan las variables y ss imprimiran los delimitadores
# necesarios para presentar el encabezado de la tabla de una forma 
# mas estilizada.
#
# se iterara por los elementos de la lista años, para poder acceder
# a los datos de la lista que contiene los ingresos y las ventas
# 
# las variables ordn, it,vt,añ, nos permiten guardar los encabezados
# para despues mostrarlos por consola
                elif consulta==3:
                    s = "|"
                    print(60*"# ")
                    print(" ")
                    print("Se mostrara una lista del total de ingresos y ventas promedio mensuales por año, asi como ingresos totales por año")
                    print(" ")
                    print(60*"# ")
                    
                    for año in años:
                        print(" ")
                        print(45*"__")
                        print("                  Lista de los ingresos y ventas promedio por mes")
                        print("   Se presenta una lista de los ingresos y ventas promedio del año: "+año+" por mes: ")
                        print(45*"__")
                        ordn = " Orden |"
                        it = " Ingreso promedio |"
                        vt = "  Ventas promedio  |"
                        añ = " año"
                        print(ordn+it+vt+añ)
                        print(7*"-"+s+18*"-"+s+19*"-"+s+8*"-")
# las siguientes lineas nos permiten buscar en que indice pertene
# un esta un elementoe una lista, para mas info consultar B[5]
#---------------------------------------------------------------index        
                        if len(años)==0:
                            indx_año=-1
                        else:
                            for x in range(len(años)):
                                if años[x]==año:
                                    indx_año = x
                                    break
                                else:
                                    indx_año=-1
#---------------------------------------------------------------index 
# se itera por los datos de la lista que contienen los ingresos promedio
# mensuales cuyo orden en el que esta dispueso los datos es:
# [año, promedio mensual, ventas mensuales]
#
# las variables, sp1,sp2,sp3, se usan para guardar en forma de strings
# los datos que se mostraran en consola con la finalidad de no hacer muy 
# largas las lineas de codigo y al final se imprimen por pantalla
                        v = ventas_ingresos_promedio_mensuales_a[indx_año][:]
                        sp1 = v[0] 
                        sp2 = str(v[1]) 
                        sp3 = str(v[2]) 
                        
                        c = 3*" "+"#1"+2*" "
                        sp2 = sp2+(18-len(sp2))*" "
                        sp3 = sp3+(19-len(sp3))*" "
                        
                        print(c+s+sp2+s+sp3+s+sp1)
                        
# ahora nos pide los ingresos totales por cada año
# estas primeras lineas nos permite mostrar de una forma
# estilizada el encabezado de la tabla, con sus espacios
# y delimitadores
#
# se itera por todos los elementos de la lista años
#
# las variables orn,ir,vt,añ, las usamos para guardar
# los encabezados y despues imprimirlos en pantalla
                    print(" ")
                    print(60*"# ")
                    print(" ")
                    print("Se mostrara una lista de los ingresos totales por año")
                    print(" ")
                    print(60*"# ")
                    for año in años:
                        print(" ")
                        print(45*"__")
                        print("                  Lista de los ingresos totales por año")
                        print("  Se presenta una lista de los ingresos y ventas totales del año: "+año)
                        print(45*"__")
                        ordn = " Orden |"
                        it = "   Ingreso Total    |"
                        vt = "    Ventas Totales  |"
                        añ = " año"
                        print(ordn,it,vt,añ)
                        print(7*"-"+s+21*"-"+s+21*"-"+s+8*"-")
# bloque de codigo que nos premite buscar en que indice un elmento
# esta en una lista, para mas información consultar B[5]
#---------------------------------------------------------------index        
                        if len(años)==0:
                            indx_año=-1
                        else:
                            for x in range(len(años)):
                                if años[x]==año:
                                    indx_año = x
                                    break
                                else:
                                    indx_año=-1
#---------------------------------------------------------------index
# se itera por los datos de la lista que contienen el total de ingresos
# de las ventas por año cuyo orden esta dispuesto de la siguiente manera
# : [año,total de ingresos, total de ventas]
#
# las variables sp1,sp2,sp3  se usan para guardar en forma de strings
# los datos que se mostraran en consola con la finalidad de no hacer muy 
# largas las lineas de codigo
                        v = total_ingresos_ventas_a[indx_año][:]
    
                        sp1 = v[0]
                        sp2 = str(v[1])
                        sp3 = str(v[2])
                
                        c = 3*" "+"#1"+2*" "
                        sp2 = 8*" "+sp2+(6-len(sp2))*" "+7*" "
                        sp3 = 9*" "+sp3+(3-len(sp3))*" "+9*" "
                        
                        print(c+s+sp2+s+sp3+s+sp1)
                        print(" ")

# ahora se mostraran el total de ingresos y ventas ordenados por años
# y meses
# Estas primeras lineas se usan para colcoar el encabezado de la table
# de una menra estilizada, espaciada y ordenada
#
# Se itera sobre los elementos de la lista años y meses
#
# las variables añ,ms,im,vm, se usan para guarlas los encabezados
# en forma de strings para despues contatenarlos y mostrarlos 
                    print(60*"# ")
                    print(" ")
                    print("Se mostrara una lista del total de ingresos y ventas de cada mes para por cada año")
                    print(" ")
                    print(60*"# ")
                    for año in años:
                        print(20*"__")
                        print("ventas de cada mes del año: "+año)
                        print(20*"__")
                        print(8*"-"+s+6*"-"+s+10*"-"+s+6*"-")
                        añ = 3*" "+"año"+2*" "+"|"
                        ms = 1*" "+"mes"+2*" "+"|"
                        im = 1*" "+"ingresos"+1*" "+"|"
                        vm = 1*" "+"ventas"+1*" "+"|"
                        print(añ+ms+im+vm)
                        print(8*"-"+s+6*"-"+s+10*"-"+s+6*"-")
                        for mes in meses:
# El bloque siguiente es par poder conocer el indice de un elemento en
# una lista. Para mas informacion consultar B[5]
#---------------------------------------------------------------index        
                            if len(años)==0:
                                indx_año=-1
                            else:
                                for x in range(len(años)):
                                    if años[x]==año:
                                        indx_año = x
                                        break
                                    else:
                                        indx_año=-1
#---------------------------------------------------------------index 
                            if len(meses)==0:
                                indx_mes=-1
                            else:
                                for x in range(len(meses)):
                                    if meses[x]==mes:
                                        indx_mes = x
                                        break
                                    else:
                                        indx_mes=-1
#---------------------------------------------------------------index
# se le asigna la variable v una copía de los elemento de la lista
# ventas_ingresos_am cuyos elementos estan dispuestos como :
# [año,mes,ingresos totales, ventas totales]
# se guardan en variable en forma de string para que sea mas sencillo
# mostrarlos por consila, colocando los "espaciados dinamicos"
# que varian conforme la longitud del string
# y la información se orden para mostrarse en pantalla
                            v = ventas_ingresos_am[indx_año][indx_mes]
                            sp_añ = v[0] #año str
                            sp_ms = v[1] # mm str
                            sp_im = str(v[2]) # ingresos str
                            sp_vm = str(v[3]) # ventas str
                    
                            sp_añ = 2*" "+sp_añ+2*" "
                            sp_ms = 2*" "+sp_ms+2*" "
                            sp_im = 2*" "+sp_im+(8-len(sp_im))*" "
                            sp_vm = sp_vm+(6-len(sp_vm))*" "
                            
                            print(sp_añ+s+sp_ms+s+sp_im+s+sp_vm)
                            print(" ")
# se le solicitara al usuario dar un valor a la variable
# condicion_lobby para salir de la sesion o mantenerse
                    print(" ")
                    condicion_lobby=int(input("Para voler al lobby teclea '1', para cerrar sesión teclear '0' "))
#------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------#
                elif consulta==4:
# estamos en el ultimo a partado, toda este bloque de codigo se
# ejecutara su consulta contiene el numero 4
#
# en esta parte el tratarse de un reporte la gran mayoria es
# escrito, cadenas de caracteres o strings multilineas que se 
# mostraran en consola, y unas ciclois for para mostrar ciertos
# articulos que pertenecen a un de las 5 categorias encontradas
                    s = "|"
                    print(60*"# ")
                    print("""
Se presentara a conticuación un reporte detallado del analisis de\
 los datos del dataset de lifestore:

Observaciones : En el dataset se encuentran compras hechas en los\
 años 2020, 2019 y 2002, estos ultimos dos años no bridan los
suficientes datos para hacer un analisis por lo cual solo se dara\
n resultados del año 2020.

1) El mes con mayor ventas en 2020 es : Marzo 
con una ganancia de $191'066 pesos  y un total de 74 ventas en ese mes
    
2) Analizando los datos nos encontramos que podemos segmentar los\
datos en 5 tipos diferentes de productos:

    - 1) Productos no conocidos y no atrayentes
    - 2) Productos poco conocidos y poco atrayentes
    - 3) Productos conocidos y poco atrayentes
    - 4) Productos conocidos y atrayentes
    - 5) Productos muy conocidos y atrayentes
    
A continuacion se presentan los productos que caen en estas categ\
orias y como mejorar las ventas y ganancias promedio:

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\
 # # # # # # # # # # # # # #
-----------------------------------------------------------------\
-----------------------------
|      #1:      |Si hay exceso inventario dejar de introducir nue\
vo hasta agotar el existente|
|   Productos   |hay 2 formas de tratar estos productos:         \
                            |
| no conocidos  | 1) Sacar el producto del catalogo y el inventar\
io sacarlo con alguna estra-|
| no atrayentes |    tegia de ventas ejemplo : rebajas           \
                            |
|               | 2) Iniciar campaña de publicidad y de ventas de\
 alto impacto               |
|---------------|------------------------------------------------\
----------------------------|
|Caracteristicas| Productos que no dejan ganancia ya sea por el p\
oco interes de la los com-  |           
|               | pradores o su desconocimiento de nuestro catalo\
go de productos.            |
 ----------------------------------------------------------------\
----------------------------
| No | id. |    categoria     | nombre                           \
                            |                           
 ----------------------------------------------------------------\
----------------------------""")
# cont nos ayuda a llevar una enumeracion de las salidas
# una vez encontrados los elementos que deben de mostrarse para
# este apartado, iteramos sobre ellos y mostramos solo aquellos 
# que coincidan con el id solicitado.
#
# se colocaran en string para que sea facil poder mostrarlos en
# pantalla, hay que recordar que lifestore_products tiene sus elementos
# [id, nombre, ,precio, categoria]
                    cont=1
                    for p in lifestore_products:
                        for i in [9,10,13,14,15,16,17,19,20,23,24,26,27,30,32,34,35,36,37,38,39,41,43,45,46,31,53,55,56,58,59,60,61,62,63,64,65,68,69,70,71,72,73,75,                                  76,77,78,79,80,81,82,83,86,87,88,                                  90,91,92,93,95,96]:
                            if p[0]==i:
                                c = str(cont)
                                sp1 = str(p[0])
                                sp2 = p[3]
                                sp3 = p[1]
                                
                                c="|"+1*" "+"#"+c+(2-len(c))*" "
                                sp1 = 1*" "+sp1+(2-len(sp1))*" "+2*" "
                                sp2 = 1*" "+sp2+(17-len(sp2))*" "
                                
                                print(c+s+sp1+s+sp2+s+sp3)
                                print(" ")
                                cont+=1
# se muestran los grupos en pantalla
                    print("""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\
 # # # # # # # # # # # # # #
-----------------------------------------------------------------\
----------------------------
|      #2       |Si hay exceso inventario dejar de introducir nue\
vo hasta agotar el existente|
|   Productos   |                                                \
                            |
| poco conocidos|1) Iniciar campaña de publicidad y de ventas de \
alcance e impacto alto      |                      
|poco atrayentes|                                                \
                            |
|---------------|------------------------------------------------\
----------------------------|
|Caracteristicas| Productos que cerecen de interes por parte de l\
os compradores, no conocen  |
|               | de su existencia y no se sienten animados a adq\
uirirlos                    |
 ----------------------------------------------------------------\
----------------------------
| No | id. |    categoria     | nombre                           \
                            |                           
 ----------------------------------------------------------------\
----------------------------""")
# cont nos ayuda a llevar una enumeracion de las salidas
# una vez encontrados los elementos que deben de mostrarse para
# este apartado, iteramos sobre ellos y mostramos solo aquellos 
# que coincidan con el id solicitado.
#
# se colocaran en string para que sea facil poder mostrarlos en
# pantalla, hay que recordar que lifestore_products tiene sus elementos
# [id, nombre, ,precio, categoria]
                    cont=1
                    for p in lifestore_products:
                        for i in [1,6,8,11,12,18,21,22,25,28,33,40,47,48,49,50,51,52,74,84,89,94]:
                            if p[0]==i:
                                c = str(cont)
                                sp1 = str(p[0])
                                sp2 = p[3]
                                sp3 = p[1]
                                
                                c="|"+1*" "+"#"+c+(2-len(c))*" "
                                sp1 = 1*" "+sp1+(2-len(sp1))*" "+2*" "
                                sp2 = 1*" "+sp2+(17-len(sp2))*" "
                                
                                print(c+s+sp1+s+sp2+s+sp3)
                                print(" ")
                                cont+=1
# se muestra el tercer grupo en pantalla
                    print("""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\
 # # # # # # # # # # # # # # 
|---------------|------------------------------------------------\
----------------------------|
|      #3       |Si hay exceso inventario, reducir el existente h\
asta tener adecuado         |
|   Productos   |                                                \
                            |
|   conocidos   |1) Iniciar campaña de publicidad de alcance mode\
rado y campaña de ventas    |
|poco atrayentes|    de alcance e impacto alto                   \
                            |
|---------------|------------------------------------------------\
----------------------------|
|Caracteristicas| Productos que gozan de cierta notoriedad pero q\
ue no inspira lo suficiente |
|               | a los compradores para adquirilos              \
                            |
 ----------------------------------------------------------------\
----------------------------
| No | id. |    categoria     | nombre                           \
                            |                           
 ----------------------------------------------------------------\
----------------------------""")
# cont nos ayuda a llevar una enumeracion de las salidas
# una vez encontrados los elementos que deben de mostrarse para
# este apartado, iteramos sobre ellos y mostramos solo aquellos 
# que coincidan con el id solicitado.
#
# se colocaran en string para que sea facil poder mostrarlos en
# pantalla, hay que recordar que lifestore_products tiene sus elementos
# [id, nombre, ,precio, categoria]
                    cont=1
                    for p in lifestore_products:
                        for i in [2,4,5,7,29,42,66,67,85]:
                            if p[0]==i:
                                c = str(cont)
                                sp1 = str(p[0])
                                sp2 = p[3]
                                sp3 = p[1]
                                
                                c="|"+1*" "+"#"+c+(2-len(c))*" "
                                sp1 = 1*" "+sp1+(2-len(sp1))*" "+2*" "
                                sp2 = 1*" "+sp2+(17-len(sp2))*" "
                                
                                print(c+s+sp1+s+sp2+s+sp3)
                                print(" ")
                                cont+=1
# se muestra el cuarto grupo y descripcion en pantalla
                    print("""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 ----------------------------------------------------------------\
----------------------------
|      #4       |Mantener el inventario completo en epocas de may\
ores ventas                 |
|   Productos   |                                                \
                            |
|   conocidos   | 1) Campañas de publicidad y campaña de ventas d\
e alcance moderado          |
|  atrayentes   |                                                \
                            |
|---------------|------------------------------------------------\
----------------------------
|Caracteristicas| Productos que tienen notoriedad dentro del cata\
logo de la empresa, generan |
|               | atención que se traduce en un ingreso de capita\
l                           |   
 ----------------------------------------------------------------\
----------------------------|
| No | id. |    categoria     | nombre                           \
                            |                           
 ----------------------------------------------------------------\
----------------------------""")
# cont nos ayuda a llevar una enumeracion de las salidas
# una vez encontrados los elementos que deben de mostrarse para
# este apartado, iteramos sobre ellos y mostramos solo aquellos 
# que coincidan con el id solicitado.
#
# se colocaran en string para que sea facil poder mostrarlos en
# pantalla, hay que recordar que lifestore_products tiene sus elementos
# [id, nombre, ,precio, categoria]
                    cont=1
                    for p in lifestore_products:
                        for i in [3,57]:
                            if p[0]==i:
                                c = str(cont)
                                sp1 = str(p[0])
                                sp2 = p[3]
                                sp3 = p[1]
                                
                                c="|"+1*" "+"#"+c+(2-len(c))*" "
                                sp1 = 1*" "+sp1+(2-len(sp1))*" "+2*" "
                                sp2 = 1*" "+sp2+(17-len(sp2))*" "
                                

                                print(c+s+sp1+s+sp2+s+sp3)
                                print(" ")
                                cont+=1
# se muestra el quinto grupo en pantalla
                    print("""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 ----------------------------------------------------------------\
----------------------------
|      #5       |Mantener el inventario completo en epocas de may\
ores ventas                 |
|   Productos   |                                                \
                            |
| muy conocidos | 1) Campañas de ventas de alcance moderado      \
                            |
|  atrayentes   |                                                \
                            |
|----------------------------------------------------------------\
----------------------------
|Caracteristicas| Productos que tienen una alta pertenencia en el\
 mercado al ser conocidos   |
|               | y generar atención que se traduce en un ingreso\
del capital                 |
 ----------------------------------------------------------------\
----------------------------|
| No | id. |    categoria     | nombre                           \
                            |                           
 ----------------------------------------------------------------\
----------------------------""")
# cont nos ayuda a llevar una enumeracion de las salidas
# una vez encontrados los elementos que deben de mostrarse para
# este apartado, iteramos sobre ellos y mostramos solo aquellos 
# que coincidan con el id solicitado.
#
# se colocaran en string para que sea facil poder mostrarlos en
# pantalla, hay que recordar que lifestore_products tiene sus elementos
# [id, nombre, ,precio, categoria]
                    cont = 1
                    for p in lifestore_products:
                        for i in [54]:
                            if p[0]==i:
                                c = str(cont)
                                sp1 = str(p[0])
                                sp2 = p[3]
                                sp3 = p[1]
                                
                                c="|"+1*" "+"#"+c+(2-len(c))*" "
                                sp1 = 1*" "+sp1+(2-len(sp1))*" "+2*" "
                                sp2 = 1*" "+sp2+(17-len(sp2))*" "
                        
                                print(c+s+sp1+s+sp2+s+sp3)
                                print(" ")
                                cont+=1
# se imprimimen las conclusiones para el analisis, y soluciones
# para mejorar el rendimiento de la tienda, asi como la menera
# propuesta de tratar el inventario
                    print("La rotacion de inventario debe hacerse considerando los grupos anteriores asi como el mes con mayores ventas")
                    print("Se recomienda tener una rotación de inventario de entre 3-4 vueltas por año, tratando de tener la mayor cantidad")
                    print("de este mismo para los primeros  4 meses siendo abril el de mayor demanda de productos")
                                
                    print(" ")
# pregunta al usuario si desea salir de la sesión o solo al lobby
                    condicion_lobby=int(input("Para voler al lobby teclea '1', para cerrar sesión teclear '0' "))
                    
                elif consulta==5:
# si en la parte del lobby el usuario ingreso el numero 5
# quiere decir salir de la sesion por lo tanto la condicion
# lobby se pasa a 0 y se termina la iteracion
                    condicion_lobby=0
                    continue
                else:
# aviso de que el valor introducido se sale del rango o no es una
# entrada valida
                    print("Entrada no valida, debe de ser un numero entero de entre 1-4")
                    continue
            else:
# se ejecuta la advertencia cuando la contrseña escrita por el ususario
# no existe en la variable contraseñas y se entiende que no existe
                print("Contraseña Incorrecta")
        
        else:
# se ejecuta la advertencia cuando el usuario escrito por el ususario
# no existe en la variable Usuarios y se entiende que no existe
            print("Usuario Incorrecto")
    
    elif menu_p1==2:
# si en la pantalla principal se ingreso el numero 2, el programa ejecutara
# las lineas de codigo para dar de alta un usuario y una contraseña que
# quedaran guardas en las listas Usuarios y Contraseñas para poder ingresar
# con estas claves, pero al crear el usuario pedira otros datos extra
# para saber quieres han creado nuevos usuarios
        print(Crear1)
        nomc = input("Nombre completo: ")
        print(Crear2)
        carg = input("Cargo: ")
        print(Crear3)
        IDE = input("IDE: ")
        print(Crear4)
        e_mail = input("e.mail: ")
        print(Crear5)
        contr = input("Contraseña: ")
        if len(contr)>=6 and len(contr)<=15:
            print(Crear6)
            contr2 = input("Contraseña: ")
        else:
# se ejecuta esta linea si la contraseña carece de la longitud minima
# de caracteres
            print("Contraseña no cuenta con la longitud requerida, intentelo de nuevo.")
            continue
        
        if contr==contr2:
# la siguiente parte del codigo evalua si ambas contraseñas coinciden
# ya que al crear un usuario te pide escribir la contraseña 2 veces
# si son correctas y coinciden entonces se despliega un menu
# para confirmar si la información es correcta
            print("Favor de comprobar que su información es correcta : ")
            print("Nombre: "+nombc)
            print("Cargo: "+carg)
            print("IDE: "+IDE)
            print("e-mail:"+e_mail)
            print("contraseña"+len(contr)*"*")
            print(Confirmacion)
# pide al usuario que introduzca 1 si es correcta 2 si no es correcta
            confirmacion = int(input("1-2"))
# al dar uno se entiende que son correctas y se guardan par
# poder ingresar con el nuevo usario y contraseña
            if confirmacion == 1:
                Info.append([entrada2,entrada3,entrada5])
                Usuarios.append(entrada4)
                Contraseñas.append(entrada7)
            else:
                continue
            
        else:
# si ambas contraseñas no coinciden se muestra el mensaje y se repite el bucle 
            print("Contraseñas no coinciden intentelo de nuevo")

